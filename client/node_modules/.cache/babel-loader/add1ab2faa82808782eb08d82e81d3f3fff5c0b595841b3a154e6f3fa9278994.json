{"ast":null,"code":"\n\n// // ExamTest.js\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import NavBar from \"./Navbar\";\n\n// function ExamTest() {\n//   const location = useLocation();\n//   const [title, setTitle] = useState(\"\");\n//   const [classs, setClasss] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\n//   const [remainingTime, setRemainingTime] = useState(0);\n//   const username = localStorage.getItem(\"username\");\n\n//   useEffect(() => {\n//     let params = {\n//       id: location.state.examId,\n//     };\n\n//     fetch(\"http://localhost:4002/examtest\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         setTitle(result.title);\n//         setClasss(result.class);\n//         setQuestions(result.questions);\n//         setScheduledStartTime(result.scheduledstartTime);\n//         setScheduledEndTime(result.scheduledendTime);\n//         console.log(result);\n\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\n//       });\n//   }, [location.state.examId]);\n\n//   useEffect(() => {\n//     const timerInterval = setInterval(() => {\n//       calculateRemainingTime(scheduledEndTime);\n//     }, 1000);\n\n//     return () => clearInterval(timerInterval);\n//   }, [scheduledEndTime]);\n\n//   const calculateRemainingTime = (endTime) => {\n//     const currentTime = new Date();\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\n\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\n//     setRemainingTime(remainingSeconds);\n//   };\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\n//       remainingSeconds\n//     ).padStart(2, \"0\")}`;\n//   };\n\n//   const handleAnswerChange = (index, value) => {\n//     const newAnswers = [...answers];\n//     newAnswers[index] = value;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     const questionAnswers = questions.map((question, index) => ({\n//       id: question.id,\n//       text: question.text,\n//       userAnswer: answers[index],\n//       correctAnswer: question.answer\n//     }));\n\n//     const params = {\n//       examId: location.state.examId,\n//       username: username,\n//       answers: questionAnswers,\n//     };\n\n//     fetch(\"http://localhost:4002/submitanswers\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         console.log(result.message);\n//         // Additional actions if needed\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting answers:\", error);\n//       });\n//   };\n\n//   return (\n//     <>\n//       <NavBar />\n//       <h1 className=\"text-center\">EXAM</h1>\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\n//       <form action=\"\" method=\"post\">\n//         <div className=\"mb-3\">\n//           <div className=\"mb-3\">\n//             <p className=\"text-center\">Name: {username}</p>\n//             <label htmlFor=\"title\" className=\"form-label\">\n//               Title\n//             </label>\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\n//           </div>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"class\" className=\"form-label\">\n//               Class\n//             </label>\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\n//           </div>\n//         </div>\n\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\">Questions</label>\n//           {questions.map((question, index) => (\n//             <div key={index} className=\"mb-3\">\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\n//                 {`Question ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`question${index + 1}`}\n//                 className=\"form-control\"\n//                 value={question.text}\n//                 disabled\n//               />\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\n//                 {`Answer ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`answer${index + 1}`}\n//                 className=\"form-control\"\n//                 value={answers[index]}\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\n//               />\n//             </div>\n//           ))}\n//         </div>\n\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default ExamTest;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import NavBar from \"./Navbar\";\n\n// function ExamTest() {\n//   const location = useLocation();\n//   const [title, setTitle] = useState(\"\");\n//   const [classs, setClasss] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\n//   const [scheduledDate, setScheduledDate] = useState(\"\");\n//   // console.log(scheduledEndTime)\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\n//   const [remainingTime, setRemainingTime] = useState(0);\n//   const username = localStorage.getItem(\"username\");\n\n//   useEffect(() => {\n//     let params = {\n//       id: location.state.examId,\n//     };\n\n//     fetch(\"http://localhost:4002/examtest\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         setTitle(result.title);\n//         setClasss(result.class);\n//         setQuestions(result.questions);\n//         setScheduledDate(result.scheduledDate)\n//         setScheduledStartTime(result.scheduledstartTime);\n//         setScheduledEndTime(result.scheduledendTime);\n//         console.log(result);\n\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\n//       });\n//   }, [location.state.examId]);\n\n//   useEffect(() => {\n//     const timerInterval = setInterval(() => {\n//       calculateRemainingTime(scheduledEndTime);\n//     }, 1000);\n\n//     return () => clearInterval(timerInterval);\n//   }, [scheduledEndTime]);\n\n//   const calculateRemainingTime = (endTime) => {\n//     const currentTime = new Date();\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\n\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\n//     setRemainingTime(remainingSeconds);\n//   };\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\n//       remainingSeconds\n//     ).padStart(2, \"0\")}`;\n//   };\n\n//   const handleAnswerChange = (index, value) => {\n//     const newAnswers = [...answers];\n//     newAnswers[index] = value;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     const questionAnswers = questions.map((question, index) => ({\n//       id: question.id,\n//       text: question.text,\n//       userAnswer: answers[index],\n//       correctAnswer: question.answer,\n\n//     }));\n\n//     const params = {\n//       examId: location.state.examId,\n//       username: username,\n//       answers: questionAnswers,\n//       scheduledDate:scheduledDate,\n//       scheduledStartTime:scheduledStartTime,\n//       scheduledEndTime:scheduledEndTime\n//     };\n\n//     fetch(\"http://localhost:4002/submitanswers\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         console.log(result.message);\n//         // Additional actions if needed\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting answers:\", error);\n//       });\n//   };\n\n//   return (\n//     <>\n//       <NavBar />\n//       <h1 className=\"text-center\">EXAM</h1>\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\n//       <form action=\"\" method=\"post\">\n//         <div className=\"mb-3\">\n//           <div className=\"mb-3\">\n//             <p className=\"text-center\">Name: {username}</p>\n//             <label htmlFor=\"title\" className=\"form-label\">\n//               Title\n//             </label>\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\n//           </div>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"class\" className=\"form-label\">\n//               Class\n//             </label>\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\n//           </div>\n//         </div>\n\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\">Questions</label>\n//           {questions.map((question, index) => (\n//             <div key={index} className=\"mb-3\">\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\n//                 {`Question ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`question${index + 1}`}\n//                 className=\"form-control\"\n//                 value={question.text}\n//                 disabled\n//               />\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\n//                 {`Answer ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`answer${index + 1}`}\n//                 className=\"form-control\"\n//                 value={answers[index]}\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\n//               />\n//             </div>\n//           ))}\n//         </div>\n\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default ExamTest;","map":{"version":3,"names":[],"sources":["C:/Users/anand/OneDrive/Desktop/Examination System/client/src/ExamTest.js"],"sourcesContent":["\r\n\r\n\r\n// // ExamTest.js\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import NavBar from \"./Navbar\";\r\n\r\n// function ExamTest() {\r\n//   const location = useLocation();\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [classs, setClasss] = useState(\"\");\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\r\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\r\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\r\n//   const [remainingTime, setRemainingTime] = useState(0);\r\n//   const username = localStorage.getItem(\"username\");\r\n\r\n//   useEffect(() => {\r\n//     let params = {\r\n//       id: location.state.examId,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/examtest\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         setTitle(result.title);\r\n//         setClasss(result.class);\r\n//         setQuestions(result.questions);\r\n//         setScheduledStartTime(result.scheduledstartTime);\r\n//         setScheduledEndTime(result.scheduledendTime);\r\n//         console.log(result);\r\n\r\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\r\n//       });\r\n//   }, [location.state.examId]);\r\n\r\n//   useEffect(() => {\r\n//     const timerInterval = setInterval(() => {\r\n//       calculateRemainingTime(scheduledEndTime);\r\n//     }, 1000);\r\n\r\n//     return () => clearInterval(timerInterval);\r\n//   }, [scheduledEndTime]);\r\n\r\n//   const calculateRemainingTime = (endTime) => {\r\n//     const currentTime = new Date();\r\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\r\n\r\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\r\n//     setRemainingTime(remainingSeconds);\r\n//   };\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\r\n//       remainingSeconds\r\n//     ).padStart(2, \"0\")}`;\r\n//   };\r\n\r\n//   const handleAnswerChange = (index, value) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[index] = value;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     const questionAnswers = questions.map((question, index) => ({\r\n//       id: question.id,\r\n//       text: question.text,\r\n//       userAnswer: answers[index],\r\n//       correctAnswer: question.answer\r\n//     }));\r\n\r\n//     const params = {\r\n//       examId: location.state.examId,\r\n//       username: username,\r\n//       answers: questionAnswers,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/submitanswers\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         console.log(result.message);\r\n//         // Additional actions if needed\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting answers:\", error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <NavBar />\r\n//       <h1 className=\"text-center\">EXAM</h1>\r\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\r\n//       <form action=\"\" method=\"post\">\r\n//         <div className=\"mb-3\">\r\n//           <div className=\"mb-3\">\r\n//             <p className=\"text-center\">Name: {username}</p>\r\n//             <label htmlFor=\"title\" className=\"form-label\">\r\n//               Title\r\n//             </label>\r\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\r\n//           </div>\r\n//           <div className=\"mb-3\">\r\n//             <label htmlFor=\"class\" className=\"form-label\">\r\n//               Class\r\n//             </label>\r\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\">Questions</label>\r\n//           {questions.map((question, index) => (\r\n//             <div key={index} className=\"mb-3\">\r\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\r\n//                 {`Question ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`question${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={question.text}\r\n//                 disabled\r\n//               />\r\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\r\n//                 {`Answer ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`answer${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={answers[index]}\r\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n//               />\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\r\n//           Submit\r\n//         </button>\r\n//       </form>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ExamTest;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import NavBar from \"./Navbar\";\r\n\r\n// function ExamTest() {\r\n//   const location = useLocation();\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [classs, setClasss] = useState(\"\");\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\r\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\r\n//   const [scheduledDate, setScheduledDate] = useState(\"\");\r\n//   // console.log(scheduledEndTime)\r\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\r\n//   const [remainingTime, setRemainingTime] = useState(0);\r\n//   const username = localStorage.getItem(\"username\");\r\n\r\n//   useEffect(() => {\r\n//     let params = {\r\n//       id: location.state.examId,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/examtest\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         setTitle(result.title);\r\n//         setClasss(result.class);\r\n//         setQuestions(result.questions);\r\n//         setScheduledDate(result.scheduledDate)\r\n//         setScheduledStartTime(result.scheduledstartTime);\r\n//         setScheduledEndTime(result.scheduledendTime);\r\n//         console.log(result);\r\n\r\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\r\n//       });\r\n//   }, [location.state.examId]);\r\n\r\n//   useEffect(() => {\r\n//     const timerInterval = setInterval(() => {\r\n//       calculateRemainingTime(scheduledEndTime);\r\n//     }, 1000);\r\n\r\n//     return () => clearInterval(timerInterval);\r\n//   }, [scheduledEndTime]);\r\n\r\n//   const calculateRemainingTime = (endTime) => {\r\n//     const currentTime = new Date();\r\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\r\n\r\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\r\n//     setRemainingTime(remainingSeconds);\r\n//   };\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\r\n//       remainingSeconds\r\n//     ).padStart(2, \"0\")}`;\r\n//   };\r\n\r\n//   const handleAnswerChange = (index, value) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[index] = value;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     const questionAnswers = questions.map((question, index) => ({\r\n//       id: question.id,\r\n//       text: question.text,\r\n//       userAnswer: answers[index],\r\n//       correctAnswer: question.answer,\r\n    \r\n//     }));\r\n\r\n//     const params = {\r\n//       examId: location.state.examId,\r\n//       username: username,\r\n//       answers: questionAnswers,\r\n//       scheduledDate:scheduledDate,\r\n//       scheduledStartTime:scheduledStartTime,\r\n//       scheduledEndTime:scheduledEndTime\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/submitanswers\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         console.log(result.message);\r\n//         // Additional actions if needed\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting answers:\", error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <NavBar />\r\n//       <h1 className=\"text-center\">EXAM</h1>\r\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\r\n//       <form action=\"\" method=\"post\">\r\n//         <div className=\"mb-3\">\r\n//           <div className=\"mb-3\">\r\n//             <p className=\"text-center\">Name: {username}</p>\r\n//             <label htmlFor=\"title\" className=\"form-label\">\r\n//               Title\r\n//             </label>\r\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\r\n//           </div>\r\n//           <div className=\"mb-3\">\r\n//             <label htmlFor=\"class\" className=\"form-label\">\r\n//               Class\r\n//             </label>\r\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\">Questions</label>\r\n//           {questions.map((question, index) => (\r\n//             <div key={index} className=\"mb-3\">\r\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\r\n//                 {`Question ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`question${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={question.text}\r\n//                 disabled\r\n//               />\r\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\r\n//                 {`Answer ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`answer${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={answers[index]}\r\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n//               />\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\r\n//           Submit\r\n//         </button>\r\n//       </form>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ExamTest;\r\n\r\n"],"mappings":";;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}