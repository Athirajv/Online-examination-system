{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\Examination System\\\\client\\\\src\\\\Active.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"./Navbar\";\nfunction StudentActive() {\n  _s();\n  const [activeExams, setActiveExams] = useState([]);\n  const [noActiveExams, setNoActiveExams] = useState(false);\n  useEffect(() => {\n    fetch('http://localhost:4002/api/examview/').then(res => res.json()).then(result => {\n      const currentDate = new Date();\n      const filteredActiveExams = result.filter(exam => {\n        const examStartDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledstartTime}`);\n        const examEndDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledendTime}`);\n        return currentDate >= examStartDateTime && currentDate <= examEndDateTime;\n      });\n      setActiveExams(filteredActiveExams);\n      setNoActiveExams(filteredActiveExams.length === 0);\n    });\n  }, []);\n  const handleStartActiveExam = examId => {\n    // You may want to add similar logic as in the StudentExam component\n    // to check if the exam can be started based on scheduled start and end times.\n    navigate('/examtest', {\n      state: {\n        examId\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mb-4 text-center\",\n        children: \"Active Exams\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), noActiveExams ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"alert alert-danger\",\n          role: \"alert\",\n          children: \"No active exams at the moment.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-bordered table table-hover alert alert-danger\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Exam Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Exam Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Start Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"End Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: activeExams.map(exam => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: exam.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: exam.scheduledDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: exam.scheduledstartTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: exam.scheduledendTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success m-2\",\n                onClick: () => handleStartActiveExam(exam._id),\n                children: \"Start\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }, this)]\n          }, exam._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 16\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(StudentActive, \"wFEqeeP4chIsawnnAXm5qkoiVsA=\");\n_c = StudentActive;\nexport default StudentActive;\n\n// import React, { useState, useEffect } from \"react\";\n// import NavBar from \"./Navbar\";\nimport { useNavigate } from \"react-router-dom\";\n\n// function StudentActive() {\n//   const [activeExams, setActiveExams] = useState([]);\n//   const [noActiveExams, setNoActiveExams] = useState(false);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     fetch('http://localhost:4002/api/examview/')\n//       .then((res) => res.json())\n//       .then((result) => {\n//         const currentDate = new Date();\n//         const filteredActiveExams = result.filter((exam) => {\n//           const examStartDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledstartTime}`);\n//           const examEndDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledendTime}`);\n\n//           return currentDate >= examStartDateTime && currentDate <= examEndDateTime;\n//         });\n\n//         setActiveExams(filteredActiveExams);\n//         setNoActiveExams(filteredActiveExams.length === 0);\n//       });\n//   }, []);\n\n// const handleStartActiveExam = (examId) => {\n//   // You may want to add similar logic as in the StudentExam component\n//   // to check if the exam can be started based on scheduled start and end times.\n//   navigate('/examtest', { state: { examId } });\n// };\n\n//   return (\n//     <>\n//       <NavBar />\n//       <div className=\"container mt-4\">\n//         <h4 className=\"mb-4 text-center\">Active Exams</h4>\n//         {noActiveExams ? (\n//           <p className=\"text-center\">\n//             <div class=\"alert alert-danger\" role=\"alert\">\n//               No active exams at the moment.\n//             </div>\n//           </p>\n//         ) : (\n//           <table className=\"table table-bordered table table-hover alert alert-danger\">\n//             <thead>\n//               <tr>\n//                 <th>Exam Name</th>\n//                 <th>Exam Date</th>\n//                 <th>Start Time</th>\n//                 <th>End Time</th>\n//                 <th>Action</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {activeExams.map((exam) => (\n//                 <tr key={exam._id}>\n//                   <td>{exam.title}</td>\n//                   <td>{exam.scheduledDate}</td>\n//                   <td>{exam.scheduledstartTime}</td>\n//                   <td>{exam.scheduledendTime}</td>\n//                   <td>\n//                     <button\n//                       className=\"btn btn-success m-2\"\n// onClick={() => handleStartActiveExam(exam._id)}\n//                     >\n//                       Start\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         )}\n//       </div>\n//     </>\n//   );\n// }\n\n// export default StudentActive;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _c;\n$RefreshReg$(_c, \"StudentActive\");","map":{"version":3,"names":["React","useState","useEffect","NavBar","StudentActive","_s","activeExams","setActiveExams","noActiveExams","setNoActiveExams","fetch","then","res","json","result","currentDate","Date","filteredActiveExams","filter","exam","examStartDateTime","scheduledDate","scheduledstartTime","examEndDateTime","scheduledendTime","length","handleStartActiveExam","examId","navigate","state","_jsxDEV","_Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","className","class","role","map","title","onClick","_id","_c","useNavigate","jsxDEV","Fragment","$RefreshReg$"],"sources":["C:/Users/anand/OneDrive/Desktop/Examination System/client/src/Active.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport NavBar from \"./Navbar\";\r\n\r\n\r\nfunction StudentActive() {\r\n  const [activeExams, setActiveExams] = useState([]);\r\n  const [noActiveExams, setNoActiveExams] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:4002/api/examview/')\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        const currentDate = new Date();\r\n        const filteredActiveExams = result.filter((exam) => {\r\n          const examStartDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledstartTime}`);\r\n          const examEndDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledendTime}`);\r\n\r\n          return currentDate >= examStartDateTime && currentDate <= examEndDateTime;\r\n        });\r\n\r\n        setActiveExams(filteredActiveExams);\r\n        setNoActiveExams(filteredActiveExams.length === 0);\r\n      });\r\n  }, []);\r\n\r\n  const handleStartActiveExam = (examId) => {\r\n    // You may want to add similar logic as in the StudentExam component\r\n    // to check if the exam can be started based on scheduled start and end times.\r\n    navigate('/examtest', { state: { examId } });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <div className=\"container mt-4\">\r\n        <h4 className=\"mb-4 text-center\">Active Exams</h4>\r\n        {noActiveExams ? (\r\n          <p className=\"text-center\"> <div class=\"alert alert-danger\" role=\"alert\">\r\n          No active exams at the moment.\r\n           </div></p>\r\n      \r\n        ) : (\r\n          <table className=\"table table-bordered table table-hover alert alert-danger\">\r\n            <thead>\r\n              <tr>\r\n                <th>Exam Name</th>\r\n                <th>Exam Date</th>\r\n                <th>Start Time</th>\r\n                <th>End Time</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n           \r\n\r\n           \r\n              {activeExams.map((exam) => (\r\n                \r\n               <tr key={exam._id}>\r\n                  <td>{exam.title}</td>\r\n                  <td>{exam.scheduledDate}</td>\r\n                  <td>{exam.scheduledstartTime}</td>\r\n                  <td>{exam.scheduledendTime}</td>\r\n                  <td><button   className=\"btn btn-success m-2\"onClick={() => handleStartActiveExam(exam._id)}>Start</button></td>\r\n                \r\n                </tr>\r\n               \r\n              ))}\r\n              \r\n            </tbody>\r\n          </table>  \r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StudentActive;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import NavBar from \"./Navbar\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// function StudentActive() {\r\n//   const [activeExams, setActiveExams] = useState([]);\r\n//   const [noActiveExams, setNoActiveExams] = useState(false);\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:4002/api/examview/')\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         const currentDate = new Date();\r\n//         const filteredActiveExams = result.filter((exam) => {\r\n//           const examStartDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledstartTime}`);\r\n//           const examEndDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledendTime}`);\r\n\r\n//           return currentDate >= examStartDateTime && currentDate <= examEndDateTime;\r\n//         });\r\n\r\n//         setActiveExams(filteredActiveExams);\r\n//         setNoActiveExams(filteredActiveExams.length === 0);\r\n//       });\r\n//   }, []);\r\n\r\n  // const handleStartActiveExam = (examId) => {\r\n  //   // You may want to add similar logic as in the StudentExam component\r\n  //   // to check if the exam can be started based on scheduled start and end times.\r\n  //   navigate('/examtest', { state: { examId } });\r\n  // };\r\n\r\n//   return (\r\n//     <>\r\n//       <NavBar />\r\n//       <div className=\"container mt-4\">\r\n//         <h4 className=\"mb-4 text-center\">Active Exams</h4>\r\n//         {noActiveExams ? (\r\n//           <p className=\"text-center\">\r\n//             <div class=\"alert alert-danger\" role=\"alert\">\r\n//               No active exams at the moment.\r\n//             </div>\r\n//           </p>\r\n//         ) : (\r\n//           <table className=\"table table-bordered table table-hover alert alert-danger\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Exam Name</th>\r\n//                 <th>Exam Date</th>\r\n//                 <th>Start Time</th>\r\n//                 <th>End Time</th>\r\n//                 <th>Action</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {activeExams.map((exam) => (\r\n//                 <tr key={exam._id}>\r\n//                   <td>{exam.title}</td>\r\n//                   <td>{exam.scheduledDate}</td>\r\n//                   <td>{exam.scheduledstartTime}</td>\r\n//                   <td>{exam.scheduledendTime}</td>\r\n//                   <td>\r\n//                     <button\r\n//                       className=\"btn btn-success m-2\"\r\n                      // onClick={() => handleStartActiveExam(exam._id)}\r\n//                     >\r\n//                       Start\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default StudentActive;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}