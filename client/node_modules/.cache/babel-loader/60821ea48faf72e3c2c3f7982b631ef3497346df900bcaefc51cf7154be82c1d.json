{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\Examination System\\\\client\\\\src\\\\ExamTest.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import NavBar from \"./Navbar\";\n\n// function ExamTest() {\n//   const location = useLocation();\n//   const [title, setTitle] = useState(\"\");\n//   const [classs, setClasss] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\n//   const [remainingTime, setRemainingTime] = useState(0);\n//   const username = localStorage.getItem(\"username\");\n\n//   useEffect(() => {\n//     let params = {\n//       id: location.state.examId,\n//     };\n\n//     fetch(\"http://localhost:4002/examtest\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         setTitle(result.title);\n//         setClasss(result.class);\n//         setQuestions(result.questions);\n//         setScheduledStartTime(result.scheduledstartTime);\n//         setScheduledEndTime(result.scheduledendTime);\n\n//         // Calculate remaining time when data is fetched\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\n//       });\n//   }, [location.state.examId]);\n\n//   useEffect(() => {\n//     // Update remaining time every second\n//     const timerInterval = setInterval(() => {\n//       calculateRemainingTime(scheduledStartTime, scheduledEndTime);\n//     }, 1000);\n\n//     // Cleanup the interval on component unmount\n//     return () => clearInterval(timerInterval);\n//   }, [scheduledStartTime, scheduledEndTime]);\n\n//   const calculateRemainingTime = (startTime, endTime) => {\n//     const currentTime = new Date();\n//     const startDateTime = new Date(`${new Date().toDateString()} ${startTime}`);\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\n\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\n//     setRemainingTime(remainingSeconds);\n//   };\n\n//   const formatTime = (seconds) => {\n//     const minutes = Math.floor(seconds / 60);\n//     const remainingSeconds = seconds % 60;\n//     return `${String(minutes).padStart(2, \"0\")}:${String(remainingSeconds).padStart(2, \"0\")}`;\n//   };\n\n//   const handleAnswerChange = (index, value) => {\n//     const newAnswers = [...answers];\n//     newAnswers[index] = value;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     // Create an array of question-answer objects\n//     const questionAnswers = questions.map((question, index) => ({\n//       id: question.id,\n//       text: question.text,\n//       answer: answers[index],\n//     }));\n\n//     const params = {\n//       examId: location.state.examId,\n//       username: username,\n//       answers: questionAnswers,\n//     };\n\n//     fetch(\"http://localhost:4002/storeanswers\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         console.log(result.message);\n//         // Optionally, you can handle the success message or navigate to a different page upon submission.\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting answers:\", error);\n//         // Handle error\n//       });\n//   };\n\n//   return (\n//     <>\n//       <NavBar />\n//       <h1 className=\"text-center\">EXAM</h1>\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\n//       <form action=\"\" method=\"post\">\n//         <div className=\"mb-3\">\n//           <div className=\"mb-3\">\n//             <p className=\"text-center\">Name: {username}</p>\n//             <label htmlFor=\"title\" className=\"form-label\">\n//               Title\n//             </label>\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\n//           </div>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"class\" className=\"form-label\">\n//               Class\n//             </label>\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\n//           </div>\n//         </div>\n\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\">Questions</label>\n//           {questions.map((question, index) => (\n//             <div key={index} className=\"mb-3\">\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\n//                 {`Question ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`question${index + 1}`}\n//                 className=\"form-control\"\n//                 value={question.text}\n//                 disabled\n//               />\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\n//                 {`Answer ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`answer${index + 1}`}\n//                 className=\"form-control\"\n//                 value={answers[index]}\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\n//               />\n//             </div>\n//           ))}\n//         </div>\n\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default ExamTest;\n\n//original code\n\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport NavBar from \"./Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ExamTest() {\n  _s();\n  const location = useLocation();\n  const [title, setTitle] = useState(\"\");\n  const [classs, setClasss] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState(Array.from({\n    length: 2\n  }, () => \"\"));\n  const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\n  const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\n  const [remainingTime, setRemainingTime] = useState(0);\n  const username = localStorage.getItem(\"username\");\n  useEffect(() => {\n    let params = {\n      id: location.state.examId\n    };\n    fetch(\"http://localhost:4002/examtest\", {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json()).then(result => {\n      setTitle(result.title);\n      setClasss(result.class);\n      setQuestions(result.questions);\n      setScheduledStartTime(result.scheduledstartTime);\n      setScheduledEndTime(result.scheduledendTime);\n\n      // Calculate remaining time when data is fetched\n      calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\n    });\n  }, [location.state.examId]);\n  useEffect(() => {\n    // Update remaining time every second\n    const timerInterval = setInterval(() => {\n      calculateRemainingTime(scheduledStartTime, scheduledEndTime);\n    }, 1000);\n\n    // Cleanup the interval on component unmount\n    return () => clearInterval(timerInterval);\n  }, [scheduledStartTime, scheduledEndTime]);\n  const calculateRemainingTime = (startTime, endTime) => {\n    const currentTime = new Date();\n    const startDateTime = new Date(`${new Date().toDateString()} ${startTime}`);\n    const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\n    const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\n    setRemainingTime(remainingSeconds);\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${String(minutes).padStart(2, \"0\")}:${String(remainingSeconds).padStart(2, \"0\")}`;\n  };\n  const handleAnswerChange = (index, value) => {\n    const newAnswers = [...answers];\n    newAnswers[index] = value;\n    setAnswers(newAnswers);\n  };\n  const handleSubmit = () => {\n    // Create an array of question-answer objects\n    const questionAnswers = questions.map((question, index) => ({\n      id: question.id,\n      text: question.text,\n      correctAnswer: question.answer,\n      userAnswer: answers[index]\n    }));\n\n    // Calculate marks based on correctness of answers\n    const marks = questionAnswers.reduce((totalMarks, {\n      correctAnswer,\n      userAnswer\n    }) => {\n      if (correctAnswer === userAnswer) {\n        return totalMarks + 2; // Both answers are correct\n      } else {\n        return totalMarks + 1; // One answer is correct\n      }\n    }, 0);\n    const params = {\n      examId: location.state.examId,\n      username: username,\n      marks: marks // Only save marks in the database\n    };\n    fetch(\"http://localhost:4002/storeanswers\", {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json()).then(result => {\n      console.log(result.message);\n      // Optionally, you can handle the success message or navigate to a different page upon submission.\n    }).catch(error => {\n      console.error(\"Error submitting answers:\", error);\n      // Handle error\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"EXAM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [\"Remaining Time: \", formatTime(remainingTime)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      method: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-center\",\n            children: [\"Name: \", username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            className: \"form-label\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"title\",\n            className: \"form-control\",\n            value: title,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"class\",\n            className: \"form-label\",\n            children: \"Class\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"class\",\n            className: \"form-control\",\n            value: classs,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `question${index + 1}`,\n            className: \"form-label\",\n            children: `Question ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: `question${index + 1}`,\n            className: \"form-control\",\n            value: question.text,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `answer${index + 1}`,\n            className: \"form-label\",\n            children: `Answer ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: `answer${index + 1}`,\n            className: \"form-control\",\n            value: answers[index],\n            onChange: e => handleAnswerChange(index, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger m-2\",\n        type: \"button\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ExamTest, \"6/d2M+6KUw5k/Pyj+XcNYIokhbg=\", false, function () {\n  return [useLocation];\n});\n_c = ExamTest;\nexport default ExamTest;\nvar _c;\n$RefreshReg$(_c, \"ExamTest\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","NavBar","jsxDEV","_jsxDEV","Fragment","_Fragment","ExamTest","_s","location","title","setTitle","classs","setClasss","questions","setQuestions","answers","setAnswers","Array","from","length","scheduledStartTime","setScheduledStartTime","scheduledEndTime","setScheduledEndTime","remainingTime","setRemainingTime","username","localStorage","getItem","params","id","state","examId","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","result","class","scheduledstartTime","scheduledendTime","calculateRemainingTime","timerInterval","setInterval","clearInterval","startTime","endTime","currentTime","Date","startDateTime","toDateString","endDateTime","remainingSeconds","Math","max","floor","formatTime","seconds","minutes","String","padStart","handleAnswerChange","index","value","newAnswers","handleSubmit","questionAnswers","map","question","text","correctAnswer","answer","userAnswer","marks","reduce","totalMarks","console","log","message","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","action","htmlFor","type","name","disabled","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/anand/OneDrive/Desktop/Examination System/client/src/ExamTest.js"],"sourcesContent":["\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import NavBar from \"./Navbar\";\r\n\r\n// function ExamTest() {\r\n//   const location = useLocation();\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [classs, setClasss] = useState(\"\");\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\r\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\r\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\r\n//   const [remainingTime, setRemainingTime] = useState(0);\r\n//   const username = localStorage.getItem(\"username\");\r\n\r\n//   useEffect(() => {\r\n//     let params = {\r\n//       id: location.state.examId,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/examtest\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         setTitle(result.title);\r\n//         setClasss(result.class);\r\n//         setQuestions(result.questions);\r\n//         setScheduledStartTime(result.scheduledstartTime);\r\n//         setScheduledEndTime(result.scheduledendTime);\r\n\r\n//         // Calculate remaining time when data is fetched\r\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\r\n//       });\r\n//   }, [location.state.examId]);\r\n\r\n//   useEffect(() => {\r\n//     // Update remaining time every second\r\n//     const timerInterval = setInterval(() => {\r\n//       calculateRemainingTime(scheduledStartTime, scheduledEndTime);\r\n//     }, 1000);\r\n\r\n//     // Cleanup the interval on component unmount\r\n//     return () => clearInterval(timerInterval);\r\n//   }, [scheduledStartTime, scheduledEndTime]);\r\n\r\n//   const calculateRemainingTime = (startTime, endTime) => {\r\n//     const currentTime = new Date();\r\n//     const startDateTime = new Date(`${new Date().toDateString()} ${startTime}`);\r\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\r\n\r\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\r\n//     setRemainingTime(remainingSeconds);\r\n//   };\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const minutes = Math.floor(seconds / 60);\r\n//     const remainingSeconds = seconds % 60;\r\n//     return `${String(minutes).padStart(2, \"0\")}:${String(remainingSeconds).padStart(2, \"0\")}`;\r\n//   };\r\n\r\n//   const handleAnswerChange = (index, value) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[index] = value;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     // Create an array of question-answer objects\r\n//     const questionAnswers = questions.map((question, index) => ({\r\n//       id: question.id,\r\n//       text: question.text,\r\n//       answer: answers[index],\r\n//     }));\r\n\r\n//     const params = {\r\n//       examId: location.state.examId,\r\n//       username: username,\r\n//       answers: questionAnswers,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/storeanswers\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         console.log(result.message);\r\n//         // Optionally, you can handle the success message or navigate to a different page upon submission.\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting answers:\", error);\r\n//         // Handle error\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <NavBar />\r\n//       <h1 className=\"text-center\">EXAM</h1>\r\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\r\n//       <form action=\"\" method=\"post\">\r\n//         <div className=\"mb-3\">\r\n//           <div className=\"mb-3\">\r\n//             <p className=\"text-center\">Name: {username}</p>\r\n//             <label htmlFor=\"title\" className=\"form-label\">\r\n//               Title\r\n//             </label>\r\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\r\n//           </div>\r\n//           <div className=\"mb-3\">\r\n//             <label htmlFor=\"class\" className=\"form-label\">\r\n//               Class\r\n//             </label>\r\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\">Questions</label>\r\n//           {questions.map((question, index) => (\r\n//             <div key={index} className=\"mb-3\">\r\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\r\n//                 {`Question ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`question${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={question.text}\r\n//                 disabled\r\n//               />\r\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\r\n//                 {`Answer ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`answer${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={answers[index]}\r\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n//               />\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\r\n//           Submit\r\n//         </button>\r\n//       </form>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ExamTest;\r\n\r\n\r\n//original code\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport NavBar from \"./Navbar\";\r\n\r\nfunction ExamTest() {\r\n  const location = useLocation();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [classs, setClasss] = useState(\"\");\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\r\n  const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\r\n  const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\r\n  const [remainingTime, setRemainingTime] = useState(0);\r\n  const username = localStorage.getItem(\"username\");\r\n\r\n  useEffect(() => {\r\n    let params = {\r\n      id: location.state.examId,\r\n    };\r\n\r\n    fetch(\"http://localhost:4002/examtest\", {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setTitle(result.title);\r\n        setClasss(result.class);\r\n        setQuestions(result.questions);\r\n        setScheduledStartTime(result.scheduledstartTime);\r\n        setScheduledEndTime(result.scheduledendTime);\r\n\r\n        // Calculate remaining time when data is fetched\r\n        calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\r\n      });\r\n  }, [location.state.examId]);\r\n\r\n  useEffect(() => {\r\n    // Update remaining time every second\r\n    const timerInterval = setInterval(() => {\r\n      calculateRemainingTime(scheduledStartTime, scheduledEndTime);\r\n    }, 1000);\r\n\r\n    // Cleanup the interval on component unmount\r\n    return () => clearInterval(timerInterval);\r\n  }, [scheduledStartTime, scheduledEndTime]);\r\n\r\n  const calculateRemainingTime = (startTime, endTime) => {\r\n    const currentTime = new Date();\r\n    const startDateTime = new Date(`${new Date().toDateString()} ${startTime}`);\r\n    const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\r\n\r\n    const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\r\n    setRemainingTime(remainingSeconds);\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    return `${String(minutes).padStart(2, \"0\")}:${String(remainingSeconds).padStart(2, \"0\")}`;\r\n  };\r\n\r\n  const handleAnswerChange = (index, value) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[index] = value;\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // Create an array of question-answer objects\r\n    const questionAnswers = questions.map((question, index) => ({\r\n      id: question.id,\r\n      text: question.text,\r\n      correctAnswer: question.answer,\r\n      userAnswer: answers[index],\r\n    }));\r\n  \r\n    // Calculate marks based on correctness of answers\r\n    const marks = questionAnswers.reduce((totalMarks, { correctAnswer, userAnswer }) => {\r\n      if (correctAnswer === userAnswer) {\r\n        return totalMarks + 2; // Both answers are correct\r\n      } else {\r\n        return totalMarks + 1; // One answer is correct\r\n      }\r\n    }, 0);\r\n  \r\n    const params = {\r\n      examId: location.state.examId,\r\n      username: username,\r\n      marks: marks, // Only save marks in the database\r\n    };\r\n  \r\n    fetch(\"http://localhost:4002/storeanswers\", {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(result.message);\r\n        // Optionally, you can handle the success message or navigate to a different page upon submission.\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error submitting answers:\", error);\r\n        // Handle error\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <h1 className=\"text-center\">EXAM</h1>\r\n      <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\r\n      <form action=\"\" method=\"post\">\r\n        <div className=\"mb-3\">\r\n          <div className=\"mb-3\">\r\n            <p className=\"text-center\">Name: {username}</p>\r\n            <label htmlFor=\"title\" className=\"form-label\">\r\n              Title\r\n            </label>\r\n            <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"class\" className=\"form-label\">\r\n              Class\r\n            </label>\r\n            <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Questions</label>\r\n          {questions.map((question, index) => (\r\n            <div key={index} className=\"mb-3\">\r\n              <label htmlFor={`question${index + 1}`} className=\"form-label\">\r\n                {`Question ${index + 1}`}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name={`question${index + 1}`}\r\n                className=\"form-control\"\r\n                value={question.text}\r\n                disabled\r\n              />\r\n              <label htmlFor={`answer${index + 1}`} className=\"form-label\">\r\n                {`Answer ${index + 1}`}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name={`answer${index + 1}`}\r\n                className=\"form-control\"\r\n                value={answers[index]}\r\n                onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExamTest;\r\n"],"mappings":";;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9B,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}