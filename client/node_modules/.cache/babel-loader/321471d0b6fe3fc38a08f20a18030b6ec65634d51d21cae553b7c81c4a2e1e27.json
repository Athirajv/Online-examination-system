{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\Examination System\\\\client\\\\src\\\\ExamView.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\n// const ExamView = () => {\n//   const { examId } = useParams();\n//   const [examData, setExamData] = useState(null);\n\n//   useEffect(() => {\n//     // Fetch exam data from the backend based on examId\n//     fetch(`http://localhost:4002/api/examview`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setExamData(data);\n//         console.log(\"Fetched Exam Data:\", data); // Log the fetched data\n//       })\n//       .catch((error) => console.error(\"Error fetching exam data:\", error));\n//   }, [examId]);\n\n//   console.log(\"Exam Data State:\", examData); // Log the state\n\n//   if (!examData) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1>{examData.title}</h1>\n//       <p>Class: {examData.class}</p>\n\n//       {examData.questions && examData.questions.length > 0 ? (\n//         <>\n//           <h2>Questions:</h2>\n//           <ul>\n//             {examData.questions.map((question, index) => (\n//               <li key={index}>{question}</li>\n//             ))}\n//           </ul>\n//         </>\n//       ) : (\n//         <p>No questions available for this exam.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ExamView;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExamView = () => {\n  _s();\n  // const { examId } = useParams();\n  const [examData, setExamData] = useState([]);\n  useEffect(() => {\n    // Fetch exam data from the backend based on examId\n    fetch(`http://localhost:4002/api/examview/`)\n    // console.log(examId)\n    .then(response => response.json()).then(data => {\n      setExamData(data);\n      console.log(\"Fetched Exam Data:\", data);\n    }).catch(error => console.error(\"Error fetching exam data:\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: examData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: examData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Class: \", examData.class]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), examData.questions && examData.questions.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Questions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Question Number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Question\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: examData.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions available for this exam.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(ExamView, \"cSb6WBc5ygtC4wRiJxCephOMHG4=\");\n_c = ExamView;\nexport default ExamView;\nvar _c;\n$RefreshReg$(_c, \"ExamView\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","ExamView","_s","examData","setExamData","fetch","then","response","json","data","console","log","catch","error","children","title","fileName","_jsxFileName","lineNumber","columnNumber","class","questions","length","map","question","index","_c","$RefreshReg$"],"sources":["C:/Users/anand/OneDrive/Desktop/Examination System/client/src/ExamView.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n\r\n// const ExamView = () => {\r\n//   const { examId } = useParams();\r\n//   const [examData, setExamData] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch exam data from the backend based on examId\r\n//     fetch(`http://localhost:4002/api/examview`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         setExamData(data);\r\n//         console.log(\"Fetched Exam Data:\", data); // Log the fetched data\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching exam data:\", error));\r\n//   }, [examId]);\r\n\r\n//   console.log(\"Exam Data State:\", examData); // Log the state\r\n\r\n//   if (!examData) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>{examData.title}</h1>\r\n//       <p>Class: {examData.class}</p>\r\n\r\n//       {examData.questions && examData.questions.length > 0 ? (\r\n//         <>\r\n//           <h2>Questions:</h2>\r\n//           <ul>\r\n//             {examData.questions.map((question, index) => (\r\n//               <li key={index}>{question}</li>\r\n//             ))}\r\n//           </ul>\r\n//         </>\r\n//       ) : (\r\n//         <p>No questions available for this exam.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ExamView;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst ExamView = () => {\r\n  // const { examId } = useParams();\r\n  const [examData, setExamData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch exam data from the backend based on examId\r\n    fetch(`http://localhost:4002/api/examview/`)\r\n    // console.log(examId)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setExamData(data);\r\n        console.log(\"Fetched Exam Data:\", data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching exam data:\", error));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {examData ? (\r\n        <>\r\n          <h1>{examData.title}</h1>\r\n          <p>Class: {examData.class}</p>\r\n\r\n          {examData.questions && examData.questions.length > 0 ? (\r\n            <>\r\n              <h2>Questions:</h2>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Question Number</th>\r\n                    <th>Question</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {examData.questions.map((question, index) => (\r\n                    <tr key={index}>\r\n                      <td>{index + 1}</td>\r\n                      <td>{question}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </>\r\n          ) : (\r\n            <p>No questions available for this exam.</p>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>Loading...</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExamView;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}