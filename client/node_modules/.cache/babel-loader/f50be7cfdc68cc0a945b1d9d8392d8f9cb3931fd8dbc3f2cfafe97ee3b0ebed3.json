{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\Examination System\\\\client\\\\src\\\\ExamTest.js\",\n  _s = $RefreshSig$();\n// // ExamTest.js\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import NavBar from \"./Navbar\";\n\n// function ExamTest() {\n//   const location = useLocation();\n//   const [title, setTitle] = useState(\"\");\n//   const [classs, setClasss] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\n//   const [remainingTime, setRemainingTime] = useState(0);\n//   const username = localStorage.getItem(\"username\");\n\n//   useEffect(() => {\n//     let params = {\n//       id: location.state.examId,\n//     };\n\n//     fetch(\"http://localhost:4002/examtest\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         setTitle(result.title);\n//         setClasss(result.class);\n//         setQuestions(result.questions);\n//         setScheduledStartTime(result.scheduledstartTime);\n//         setScheduledEndTime(result.scheduledendTime);\n//         console.log(result);\n\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\n//       });\n//   }, [location.state.examId]);\n\n//   useEffect(() => {\n//     const timerInterval = setInterval(() => {\n//       calculateRemainingTime(scheduledEndTime);\n//     }, 1000);\n\n//     return () => clearInterval(timerInterval);\n//   }, [scheduledEndTime]);\n\n//   const calculateRemainingTime = (endTime) => {\n//     const currentTime = new Date();\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\n\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\n//     setRemainingTime(remainingSeconds);\n//   };\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\n//       remainingSeconds\n//     ).padStart(2, \"0\")}`;\n//   };\n\n//   const handleAnswerChange = (index, value) => {\n//     const newAnswers = [...answers];\n//     newAnswers[index] = value;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     const questionAnswers = questions.map((question, index) => ({\n//       id: question.id,\n//       text: question.text,\n//       userAnswer: answers[index],\n//       correctAnswer: question.answer\n//     }));\n\n//     const params = {\n//       examId: location.state.examId,\n//       username: username,\n//       answers: questionAnswers,\n//     };\n\n//     fetch(\"http://localhost:4002/submitanswers\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         console.log(result.message);\n//         // Additional actions if needed\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting answers:\", error);\n//       });\n//   };\n\n//   return (\n//     <>\n//       <NavBar />\n//       <h1 className=\"text-center\">EXAM</h1>\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\n//       <form action=\"\" method=\"post\">\n//         <div className=\"mb-3\">\n//           <div className=\"mb-3\">\n//             <p className=\"text-center\">Name: {username}</p>\n//             <label htmlFor=\"title\" className=\"form-label\">\n//               Title\n//             </label>\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\n//           </div>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"class\" className=\"form-label\">\n//               Class\n//             </label>\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\n//           </div>\n//         </div>\n\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\">Questions</label>\n//           {questions.map((question, index) => (\n//             <div key={index} className=\"mb-3\">\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\n//                 {`Question ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`question${index + 1}`}\n//                 className=\"form-control\"\n//                 value={question.text}\n//                 disabled\n//               />\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\n//                 {`Answer ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`answer${index + 1}`}\n//                 className=\"form-control\"\n//                 value={answers[index]}\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\n//               />\n//             </div>\n//           ))}\n//         </div>\n\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default ExamTest;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import NavBar from \"./Navbar\";\n\n// function ExamTest() {\n//   const location = useLocation();\n//   const [title, setTitle] = useState(\"\");\n//   const [classs, setClasss] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\n//   const [scheduledDate, setScheduledDate] = useState(\"\");\n//   // console.log(scheduledEndTime)\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\n//   const [remainingTime, setRemainingTime] = useState(0);\n//   const username = localStorage.getItem(\"username\");\n\n//   useEffect(() => {\n//     let params = {\n//       id: location.state.examId,\n//     };\n\n//     fetch(\"http://localhost:4002/examtest\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         setTitle(result.title);\n//         setClasss(result.class);\n//         setQuestions(result.questions);\n//         setScheduledDate(result.scheduledDate)\n//         setScheduledStartTime(result.scheduledstartTime);\n//         setScheduledEndTime(result.scheduledendTime);\n//         console.log(result);\n\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\n//       });\n//   }, [location.state.examId]);\n\n//   useEffect(() => {\n//     const timerInterval = setInterval(() => {\n//       calculateRemainingTime(scheduledEndTime);\n//     }, 1000);\n\n//     return () => clearInterval(timerInterval);\n//   }, [scheduledEndTime]);\n\n//   const calculateRemainingTime = (endTime) => {\n//     const currentTime = new Date();\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\n\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\n//     setRemainingTime(remainingSeconds);\n//   };\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\n//       remainingSeconds\n//     ).padStart(2, \"0\")}`;\n//   };\n\n//   const handleAnswerChange = (index, value) => {\n//     const newAnswers = [...answers];\n//     newAnswers[index] = value;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     const questionAnswers = questions.map((question, index) => ({\n//       id: question.id,\n//       text: question.text,\n//       userAnswer: answers[index],\n//       correctAnswer: question.answer,\n\n//     }));\n\n//     const params = {\n//       examId: location.state.examId,\n//       username: username,\n//       answers: questionAnswers,\n//       scheduledDate:scheduledDate,\n//       scheduledStartTime:scheduledStartTime,\n//       scheduledEndTime:scheduledEndTime\n//     };\n\n//     fetch(\"http://localhost:4002/submitanswers\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         console.log(result.message);\n//         // Additional actions if needed\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting answers:\", error);\n//       });\n//   };\n\n//   return (\n//     <>\n//       <NavBar />\n//       <h1 className=\"text-center\">EXAM</h1>\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\n//       <form action=\"\" method=\"post\">\n//         <div className=\"mb-3\">\n//           <div className=\"mb-3\">\n//             <p className=\"text-center\">Name: {username}</p>\n//             <label htmlFor=\"title\" className=\"form-label\">\n//               Title\n//             </label>\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\n//           </div>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"class\" className=\"form-label\">\n//               Class\n//             </label>\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\n//           </div>\n//         </div>\n\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\">Questions</label>\n//           {questions.map((question, index) => (\n//             <div key={index} className=\"mb-3\">\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\n//                 {`Question ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`question${index + 1}`}\n//                 className=\"form-control\"\n//                 value={question.text}\n//                 disabled\n//               />\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\n//                 {`Answer ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`answer${index + 1}`}\n//                 className=\"form-control\"\n//                 value={answers[index]}\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\n//               />\n//             </div>\n//           ))}\n//         </div>\n\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default ExamTest;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import NavBar from \"./Navbar\";\n\n// function ExamTest() {\n//   const location = useLocation();\n//   const [title, setTitle] = useState(\"\");\n//   const [classs, setClasss] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\n//   const [scheduledDate, setScheduledDate] = useState(\"\");\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\n//   const [remainingTime, setRemainingTime] = useState(0);\n//   const username = localStorage.getItem(\"username\");\n\n//   useEffect(() => {\n//     let params = {\n//       id: location.state.examId,\n//     };\n\n//     fetch(\"http://localhost:4002/examtest\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         setTitle(result.title);\n//         setClasss(result.class);\n//         setQuestions(result.questions);\n//         setScheduledDate(result.scheduledDate);\n//         setScheduledStartTime(result.scheduledstartTime);\n//         setScheduledEndTime(result.scheduledendTime);\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\n//       });\n//   }, [location.state.examId]);\n\n//   useEffect(() => {\n//     const timerInterval = setInterval(() => {\n//       calculateRemainingTime(scheduledEndTime);\n//     }, 1000);\n\n//     return () => clearInterval(timerInterval);\n//   }, [scheduledEndTime]);\n\n//   const calculateRemainingTime = (endTime) => {\n//     const currentTime = new Date();\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\n\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\n//     setRemainingTime(remainingSeconds);\n//   };\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\n//       remainingSeconds\n//     ).padStart(2, \"0\")}`;\n//   };\n\n//   const handleAnswerChange = (index, value) => {\n//     const newAnswers = [...answers];\n//     newAnswers[index] = value;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     const questionAnswers = questions.map((question, index) => ({\n//       id: question.id,\n//       text: question.text,\n//       userAnswer: answers[index],\n//       correctAnswer: question.answer,\n//     }));\n\n//     const params = {\n//       examId: location.state.examId,\n//       username: username,\n//       answers: questionAnswers,\n//       scheduledDate: scheduledDate,\n//       scheduledStartTime: scheduledStartTime,\n//       scheduledEndTime: scheduledEndTime,\n//     };\n\n//     fetch(\"http://localhost:4002/submitanswers\", {\n//       method: \"post\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(params),\n//     })\n//       .then((res) => res.json())\n//       .then((result) => {\n//         console.log(result.message);\n//         // Additional actions if needed\n//       })\n//       .catch((error) => {\n//         console.error(\"Error submitting answers:\", error);\n//       });\n//       window.location.reload();\n//   };\n\n//   return (\n//     <>\n//       <NavBar />\n//       <h1 className=\"text-center\">EXAM</h1>\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\n//       <form action=\"\" method=\"post\">\n//         <div className=\"mb-3\">\n//           <div className=\"mb-3\">\n//             <p className=\"text-center\">Name: {username}</p>\n//             <label htmlFor=\"title\" className=\"form-label\">\n//               Title\n//             </label>\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\n//           </div>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"class\" className=\"form-label\">\n//               Class\n//             </label>\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\n//           </div>\n//         </div>\n\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\">Questions</label>\n//           {questions.map((question, index) => (\n//             <div key={index} className=\"mb-3\">\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\n//                 {`Question ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`question${index + 1}`}\n//                 className=\"form-control\"\n//                 value={question.text}\n//                 disabled\n//               />\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\n//                 {`Answer ${index + 1}`}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 name={`answer${index + 1}`}\n//                 className=\"form-control\"\n//                 value={answers[index]}\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\n//               />\n//             </div>\n//           ))}\n//         </div>\n\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default ExamTest;\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport NavBar from \"./Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ExamTest() {\n  _s();\n  const location = useLocation();\n  const [title, setTitle] = useState(\"\");\n  const [classs, setClasss] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState(Array.from({\n    length: 2\n  }, () => \"\"));\n  const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\n  const [scheduledDate, setScheduledDate] = useState(\"\");\n  const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\n  const [remainingTime, setRemainingTime] = useState(0);\n  const username = localStorage.getItem(\"username\");\n  useEffect(() => {\n    let params = {\n      id: location.state.examId\n    };\n    fetch(\"http://localhost:4002/examtest\", {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json()).then(result => {\n      setTitle(result.title);\n      setClasss(result.class);\n      setQuestions(result.questions);\n      setScheduledDate(result.scheduledDate);\n      setScheduledStartTime(result.scheduledstartTime);\n      setScheduledEndTime(result.scheduledendTime);\n      calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\n    });\n  }, [location.state.examId]);\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      calculateRemainingTime(scheduledEndTime);\n    }, 1000);\n    return () => clearInterval(timerInterval);\n  }, [scheduledEndTime]);\n  const calculateRemainingTime = endTime => {\n    const currentTime = new Date();\n    const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\n    const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\n    setRemainingTime(remainingSeconds);\n  };\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(remainingSeconds).padStart(2, \"0\")}`;\n  };\n  const handleAnswerChange = (index, value) => {\n    const newAnswers = [...answers];\n    newAnswers[index] = value;\n    setAnswers(newAnswers);\n  };\n  const handleSubmit = () => {\n    const questionAnswers = questions.map((question, index) => ({\n      id: question.id,\n      text: question.text,\n      userAnswer: answers[index],\n      correctAnswer: question.answer\n    }));\n\n    // Calculate the percentage of correct answers\n    const correctAnswersCount = questionAnswers.reduce((count, q) => q.userAnswer === q.correctAnswer ? count + 1 : count, 0);\n    const totalQuestions = questionAnswers.length;\n    const percentage = correctAnswersCount / totalQuestions * 100;\n    const params = {\n      examId: location.state.examId,\n      username: username,\n      answers: questionAnswers,\n      scheduledDate: scheduledDate,\n      scheduledStartTime: scheduledStartTime,\n      scheduledEndTime: scheduledEndTime,\n      marks: percentage // Store marks as a percentage\n    };\n    fetch(\"http://localhost:4002/submitanswers\", {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json()).then(result => {\n      console.log(result.message);\n      // Additional actions if needed\n    }).catch(error => {\n      console.error(\"Error submitting answers:\", error);\n    });\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"EXAM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [\"Remaining Time: \", formatTime(remainingTime)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      method: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-center\",\n            children: [\"Name: \", username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            className: \"form-label\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"title\",\n            className: \"form-control\",\n            value: title,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"class\",\n            className: \"form-label\",\n            children: \"Class\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"class\",\n            className: \"form-control\",\n            value: classs,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `question${index + 1}`,\n            className: \"form-label\",\n            children: `Question ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: `question${index + 1}`,\n            className: \"form-control\",\n            value: question.text,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `answer${index + 1}`,\n            className: \"form-label\",\n            children: `Answer ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: `answer${index + 1}`,\n            className: \"form-control\",\n            value: answers[index],\n            onChange: e => handleAnswerChange(index, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger m-2\",\n        type: \"button\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ExamTest, \"fz5Bhw0eoGdz9q+P1QilsSYk9vo=\", false, function () {\n  return [useLocation];\n});\n_c = ExamTest;\nexport default ExamTest;\nvar _c;\n$RefreshReg$(_c, \"ExamTest\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","NavBar","jsxDEV","_jsxDEV","Fragment","_Fragment","ExamTest","_s","location","title","setTitle","classs","setClasss","questions","setQuestions","answers","setAnswers","Array","from","length","scheduledStartTime","setScheduledStartTime","scheduledDate","setScheduledDate","scheduledEndTime","setScheduledEndTime","remainingTime","setRemainingTime","username","localStorage","getItem","params","id","state","examId","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","result","class","scheduledstartTime","scheduledendTime","calculateRemainingTime","timerInterval","setInterval","clearInterval","endTime","currentTime","Date","endDateTime","toDateString","remainingSeconds","Math","max","floor","formatTime","seconds","hours","minutes","String","padStart","handleAnswerChange","index","value","newAnswers","handleSubmit","questionAnswers","map","question","text","userAnswer","correctAnswer","answer","correctAnswersCount","reduce","count","q","totalQuestions","percentage","marks","console","log","message","catch","error","window","reload","children","fileName","_jsxFileName","lineNumber","columnNumber","className","action","htmlFor","type","name","disabled","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/anand/OneDrive/Desktop/Examination System/client/src/ExamTest.js"],"sourcesContent":["\r\n\r\n\r\n// // ExamTest.js\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import NavBar from \"./Navbar\";\r\n\r\n// function ExamTest() {\r\n//   const location = useLocation();\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [classs, setClasss] = useState(\"\");\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\r\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\r\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\r\n//   const [remainingTime, setRemainingTime] = useState(0);\r\n//   const username = localStorage.getItem(\"username\");\r\n\r\n//   useEffect(() => {\r\n//     let params = {\r\n//       id: location.state.examId,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/examtest\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         setTitle(result.title);\r\n//         setClasss(result.class);\r\n//         setQuestions(result.questions);\r\n//         setScheduledStartTime(result.scheduledstartTime);\r\n//         setScheduledEndTime(result.scheduledendTime);\r\n//         console.log(result);\r\n\r\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\r\n//       });\r\n//   }, [location.state.examId]);\r\n\r\n//   useEffect(() => {\r\n//     const timerInterval = setInterval(() => {\r\n//       calculateRemainingTime(scheduledEndTime);\r\n//     }, 1000);\r\n\r\n//     return () => clearInterval(timerInterval);\r\n//   }, [scheduledEndTime]);\r\n\r\n//   const calculateRemainingTime = (endTime) => {\r\n//     const currentTime = new Date();\r\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\r\n\r\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\r\n//     setRemainingTime(remainingSeconds);\r\n//   };\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\r\n//       remainingSeconds\r\n//     ).padStart(2, \"0\")}`;\r\n//   };\r\n\r\n//   const handleAnswerChange = (index, value) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[index] = value;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     const questionAnswers = questions.map((question, index) => ({\r\n//       id: question.id,\r\n//       text: question.text,\r\n//       userAnswer: answers[index],\r\n//       correctAnswer: question.answer\r\n//     }));\r\n\r\n//     const params = {\r\n//       examId: location.state.examId,\r\n//       username: username,\r\n//       answers: questionAnswers,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/submitanswers\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         console.log(result.message);\r\n//         // Additional actions if needed\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting answers:\", error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <NavBar />\r\n//       <h1 className=\"text-center\">EXAM</h1>\r\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\r\n//       <form action=\"\" method=\"post\">\r\n//         <div className=\"mb-3\">\r\n//           <div className=\"mb-3\">\r\n//             <p className=\"text-center\">Name: {username}</p>\r\n//             <label htmlFor=\"title\" className=\"form-label\">\r\n//               Title\r\n//             </label>\r\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\r\n//           </div>\r\n//           <div className=\"mb-3\">\r\n//             <label htmlFor=\"class\" className=\"form-label\">\r\n//               Class\r\n//             </label>\r\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\">Questions</label>\r\n//           {questions.map((question, index) => (\r\n//             <div key={index} className=\"mb-3\">\r\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\r\n//                 {`Question ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`question${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={question.text}\r\n//                 disabled\r\n//               />\r\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\r\n//                 {`Answer ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`answer${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={answers[index]}\r\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n//               />\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\r\n//           Submit\r\n//         </button>\r\n//       </form>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ExamTest;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import NavBar from \"./Navbar\";\r\n\r\n// function ExamTest() {\r\n//   const location = useLocation();\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [classs, setClasss] = useState(\"\");\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\r\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\r\n//   const [scheduledDate, setScheduledDate] = useState(\"\");\r\n//   // console.log(scheduledEndTime)\r\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\r\n//   const [remainingTime, setRemainingTime] = useState(0);\r\n//   const username = localStorage.getItem(\"username\");\r\n\r\n//   useEffect(() => {\r\n//     let params = {\r\n//       id: location.state.examId,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/examtest\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         setTitle(result.title);\r\n//         setClasss(result.class);\r\n//         setQuestions(result.questions);\r\n//         setScheduledDate(result.scheduledDate)\r\n//         setScheduledStartTime(result.scheduledstartTime);\r\n//         setScheduledEndTime(result.scheduledendTime);\r\n//         console.log(result);\r\n\r\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\r\n//       });\r\n//   }, [location.state.examId]);\r\n\r\n//   useEffect(() => {\r\n//     const timerInterval = setInterval(() => {\r\n//       calculateRemainingTime(scheduledEndTime);\r\n//     }, 1000);\r\n\r\n//     return () => clearInterval(timerInterval);\r\n//   }, [scheduledEndTime]);\r\n\r\n//   const calculateRemainingTime = (endTime) => {\r\n//     const currentTime = new Date();\r\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\r\n\r\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\r\n//     setRemainingTime(remainingSeconds);\r\n//   };\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\r\n//       remainingSeconds\r\n//     ).padStart(2, \"0\")}`;\r\n//   };\r\n\r\n//   const handleAnswerChange = (index, value) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[index] = value;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     const questionAnswers = questions.map((question, index) => ({\r\n//       id: question.id,\r\n//       text: question.text,\r\n//       userAnswer: answers[index],\r\n//       correctAnswer: question.answer,\r\n    \r\n//     }));\r\n\r\n//     const params = {\r\n//       examId: location.state.examId,\r\n//       username: username,\r\n//       answers: questionAnswers,\r\n//       scheduledDate:scheduledDate,\r\n//       scheduledStartTime:scheduledStartTime,\r\n//       scheduledEndTime:scheduledEndTime\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/submitanswers\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         console.log(result.message);\r\n//         // Additional actions if needed\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting answers:\", error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <NavBar />\r\n//       <h1 className=\"text-center\">EXAM</h1>\r\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\r\n//       <form action=\"\" method=\"post\">\r\n//         <div className=\"mb-3\">\r\n//           <div className=\"mb-3\">\r\n//             <p className=\"text-center\">Name: {username}</p>\r\n//             <label htmlFor=\"title\" className=\"form-label\">\r\n//               Title\r\n//             </label>\r\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\r\n//           </div>\r\n//           <div className=\"mb-3\">\r\n//             <label htmlFor=\"class\" className=\"form-label\">\r\n//               Class\r\n//             </label>\r\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\">Questions</label>\r\n//           {questions.map((question, index) => (\r\n//             <div key={index} className=\"mb-3\">\r\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\r\n//                 {`Question ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`question${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={question.text}\r\n//                 disabled\r\n//               />\r\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\r\n//                 {`Answer ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`answer${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={answers[index]}\r\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n//               />\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\r\n//           Submit\r\n//         </button>\r\n//       </form>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ExamTest;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import NavBar from \"./Navbar\";\r\n\r\n// function ExamTest() {\r\n//   const location = useLocation();\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [classs, setClasss] = useState(\"\");\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\r\n//   const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\r\n//   const [scheduledDate, setScheduledDate] = useState(\"\");\r\n//   const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\r\n//   const [remainingTime, setRemainingTime] = useState(0);\r\n//   const username = localStorage.getItem(\"username\");\r\n\r\n//   useEffect(() => {\r\n//     let params = {\r\n//       id: location.state.examId,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/examtest\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         setTitle(result.title);\r\n//         setClasss(result.class);\r\n//         setQuestions(result.questions);\r\n//         setScheduledDate(result.scheduledDate);\r\n//         setScheduledStartTime(result.scheduledstartTime);\r\n//         setScheduledEndTime(result.scheduledendTime);\r\n//         calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\r\n//       });\r\n//   }, [location.state.examId]);\r\n\r\n//   useEffect(() => {\r\n//     const timerInterval = setInterval(() => {\r\n//       calculateRemainingTime(scheduledEndTime);\r\n//     }, 1000);\r\n\r\n//     return () => clearInterval(timerInterval);\r\n//   }, [scheduledEndTime]);\r\n\r\n//   const calculateRemainingTime = (endTime) => {\r\n//     const currentTime = new Date();\r\n//     const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\r\n\r\n//     const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\r\n//     setRemainingTime(remainingSeconds);\r\n//   };\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\r\n//       remainingSeconds\r\n//     ).padStart(2, \"0\")}`;\r\n//   };\r\n\r\n//   const handleAnswerChange = (index, value) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[index] = value;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     const questionAnswers = questions.map((question, index) => ({\r\n//       id: question.id,\r\n//       text: question.text,\r\n//       userAnswer: answers[index],\r\n//       correctAnswer: question.answer,\r\n//     }));\r\n\r\n//     const params = {\r\n//       examId: location.state.examId,\r\n//       username: username,\r\n//       answers: questionAnswers,\r\n//       scheduledDate: scheduledDate,\r\n//       scheduledStartTime: scheduledStartTime,\r\n//       scheduledEndTime: scheduledEndTime,\r\n//     };\r\n\r\n//     fetch(\"http://localhost:4002/submitanswers\", {\r\n//       method: \"post\",\r\n//       headers: {\r\n//         Accept: \"application/json\",\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(params),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((result) => {\r\n//         console.log(result.message);\r\n//         // Additional actions if needed\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error submitting answers:\", error);\r\n//       });\r\n//       window.location.reload();\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <NavBar />\r\n//       <h1 className=\"text-center\">EXAM</h1>\r\n//       <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\r\n//       <form action=\"\" method=\"post\">\r\n//         <div className=\"mb-3\">\r\n//           <div className=\"mb-3\">\r\n//             <p className=\"text-center\">Name: {username}</p>\r\n//             <label htmlFor=\"title\" className=\"form-label\">\r\n//               Title\r\n//             </label>\r\n//             <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\r\n//           </div>\r\n//           <div className=\"mb-3\">\r\n//             <label htmlFor=\"class\" className=\"form-label\">\r\n//               Class\r\n//             </label>\r\n//             <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\">Questions</label>\r\n//           {questions.map((question, index) => (\r\n//             <div key={index} className=\"mb-3\">\r\n//               <label htmlFor={`question${index + 1}`} className=\"form-label\">\r\n//                 {`Question ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`question${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={question.text}\r\n//                 disabled\r\n//               />\r\n//               <label htmlFor={`answer${index + 1}`} className=\"form-label\">\r\n//                 {`Answer ${index + 1}`}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={`answer${index + 1}`}\r\n//                 className=\"form-control\"\r\n//                 value={answers[index]}\r\n//                 onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n//               />\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\r\n//           Submit\r\n//         </button>\r\n//       </form>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ExamTest;\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport NavBar from \"./Navbar\";\r\n\r\nfunction ExamTest() {\r\n  const location = useLocation();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [classs, setClasss] = useState(\"\");\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState(Array.from({ length: 2 }, () => \"\"));\r\n  const [scheduledStartTime, setScheduledStartTime] = useState(\"\");\r\n  const [scheduledDate, setScheduledDate] = useState(\"\");\r\n  const [scheduledEndTime, setScheduledEndTime] = useState(\"\");\r\n  const [remainingTime, setRemainingTime] = useState(0);\r\n  const username = localStorage.getItem(\"username\");\r\n\r\n  useEffect(() => {\r\n    let params = {\r\n      id: location.state.examId,\r\n    };\r\n\r\n    fetch(\"http://localhost:4002/examtest\", {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setTitle(result.title);\r\n        setClasss(result.class);\r\n        setQuestions(result.questions);\r\n        setScheduledDate(result.scheduledDate);\r\n        setScheduledStartTime(result.scheduledstartTime);\r\n        setScheduledEndTime(result.scheduledendTime);\r\n        calculateRemainingTime(result.scheduledstartTime, result.scheduledendTime);\r\n      });\r\n  }, [location.state.examId]);\r\n\r\n  useEffect(() => {\r\n    const timerInterval = setInterval(() => {\r\n      calculateRemainingTime(scheduledEndTime);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timerInterval);\r\n  }, [scheduledEndTime]);\r\n\r\n  const calculateRemainingTime = (endTime) => {\r\n    const currentTime = new Date();\r\n    const endDateTime = new Date(`${new Date().toDateString()} ${endTime}`);\r\n\r\n    const remainingSeconds = Math.max(0, Math.floor((endDateTime - currentTime) / 1000));\r\n    setRemainingTime(remainingSeconds);\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const remainingSeconds = seconds % 60;\r\n\r\n    return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\r\n      remainingSeconds\r\n    ).padStart(2, \"0\")}`;\r\n  };\r\n\r\n  const handleAnswerChange = (index, value) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[index] = value;\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const questionAnswers = questions.map((question, index) => ({\r\n      id: question.id,\r\n      text: question.text,\r\n      userAnswer: answers[index],\r\n      correctAnswer: question.answer,\r\n    }));\r\n\r\n    // Calculate the percentage of correct answers\r\n    const correctAnswersCount = questionAnswers.reduce((count, q) => q.userAnswer === q.correctAnswer ? count + 1 : count, 0);\r\n    const totalQuestions = questionAnswers.length;\r\n    const percentage = (correctAnswersCount / totalQuestions) * 100;\r\n\r\n    const params = {\r\n      examId: location.state.examId,\r\n      username: username,\r\n      answers: questionAnswers,\r\n      scheduledDate: scheduledDate,\r\n      scheduledStartTime: scheduledStartTime,\r\n      scheduledEndTime: scheduledEndTime,\r\n      marks: percentage, // Store marks as a percentage\r\n    };\r\n\r\n    fetch(\"http://localhost:4002/submitanswers\", {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(result.message);\r\n        // Additional actions if needed\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error submitting answers:\", error);\r\n      });\r\n\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <h1 className=\"text-center\">EXAM</h1>\r\n      <div className=\"timer\">Remaining Time: {formatTime(remainingTime)}</div>\r\n      <form action=\"\" method=\"post\">\r\n        <div className=\"mb-3\">\r\n          <div className=\"mb-3\">\r\n            <p className=\"text-center\">Name: {username}</p>\r\n            <label htmlFor=\"title\" className=\"form-label\">\r\n              Title\r\n            </label>\r\n            <input type=\"text\" name=\"title\" className=\"form-control\" value={title} disabled />\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"class\" className=\"form-label\">\r\n              Class\r\n            </label>\r\n            <input type=\"text\" name=\"class\" className=\"form-control\" value={classs} disabled />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Questions</label>\r\n          {questions.map((question, index) => (\r\n            <div key={index} className=\"mb-3\">\r\n              <label htmlFor={`question${index + 1}`} className=\"form-label\">\r\n                {`Question ${index + 1}`}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name={`question${index + 1}`}\r\n                className=\"form-control\"\r\n                value={question.text}\r\n                disabled\r\n              />\r\n              <label htmlFor={`answer${index + 1}`} className=\"form-label\">\r\n                {`Answer ${index + 1}`}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name={`answer${index + 1}`}\r\n                className=\"form-control\"\r\n                value={answers[index]}\r\n                onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <button className=\"btn btn-danger m-2\" type=\"button\" onClick={handleSubmit}>\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExamTest;\r\n"],"mappings":";;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}