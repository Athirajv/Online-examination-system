{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\Examination System\\\\client\\\\src\\\\StudentExam.js\",\n  _s = $RefreshSig$();\n// // import React from \"react\";\n// // import NavBar from \"./Navbar\";\n// // import SideBar from \"./Sidebar\";\n// // function StudentExam(){\n// //     return(\n// //         <>\n// //         <div className=\"content\">\n// //         <NavBar/>\n// //         <SideBar/>\n// //         </div>\n// //         </>\n// //     )\n// // }\n// // export default StudentExam\n\n// // import React, { useState, useEffect } from \"react\";\n// // import NavBar from \"./Navbar\";\n// // import SideBar from \"./Sidebar\";\n\n// // const ExamView = () => {\n//   // const [examData, setExamData] = useState([]);\n//   // const [scheduleExamData, setScheduleExamData] = useState({\n//   //   class: \"\",\n//   //   title: \"\",\n//   //   scheduledDate: \"\",\n//   //   scheduledstartTime: \"\",\n//   //   scheduledendTime: \"\",\n//   // });\n//   // const [isScheduling, setIsScheduling] = useState(false);\n\n//   // useEffect(() => {\n//   //   // Fetch exam data from the backend\n//   //   fetch(`http://localhost:4002/api/examview/`)\n//   //     .then((response) => response.json())\n//   //     .then((data) => {\n//   //       setExamData(data);\n//   //       console.log(\"Fetched Exam Data:\", data);\n//   //     })\n//   //     .catch((error) => console.error(\"Error fetching exam data:\", error));\n//   // }, []);\n\n// //   const handleScheduleExam = (index) => {\n// //     const selectedExam = examData[index];\n// //     setScheduleExamData({\n// //       class: selectedExam.class,\n// //       title: selectedExam.title,\n// //       scheduledDate: \"\",\n// //       // scheduledTime: \"\",\n// //       scheduledstartTime: \"\",\n// //     scheduledendTime: \"\"\n// //     });\n// //     setIsScheduling(true);\n// //   };\n\n// //   const handleScheduleSubmit = (e) => {\n// //     e.preventDefault();\n\n// //     // Implement the logic to send the scheduled exam data to the backend\n// //     // ...\n\n// //     // Reset form data\n// //     setScheduleExamData({\n// //       class: \"\",\n// //       title: \"\",\n// //       scheduledDate: \"\",\n// //       // scheduledTime: \"\",\n// //       scheduledstartTime: \"\",\n// //     scheduledendTime: \"\"\n// //     });\n\n// //     setIsScheduling(false);\n\n// //     // Show alert or confirmation modal\n// //     alert(\"Exam scheduled successfully!\");\n// //   };\n\n// //   return (\n// //     <div className=\"content\">\n// //       <NavBar />\n// //       <SideBar />\n// //       <div>\n// //         <h1 className=\"text-center\">·¥áx·¥Ä·¥ç ·¥Ö·¥á·¥õ·¥Ä…™ üÍú±</h1>\n// //         <table border=\"1\" className=\"table table-hover\">\n// //           <thead>\n// //             <tr>\n// //               <th>Class</th>\n// //               <th>Title</th>\n// //               <th>Questions</th>\n// //               <th>Action</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {examData.map((item, index) => (\n// //               <tr key={index}>\n// //                 <td>{item.class}</td>\n// //                 <td>{item.title}</td>\n// //                 <td>\n// //                   <button style={{ marginLeft: '20px', borderRadius: '20px' }}> üëÅÔ∏è‚Äçüó®Ô∏è</button>\n// //                 </td>\n// //                 <td>\n// //                   <button className=\"btn btn-info m-2\" onClick={() => handleScheduleExam(index)}>\n// //                     Schedule Exam\n// //                   </button>\n// //                 </td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n\n// //         {isScheduling && (\n// //           // <div>\n// //           //   <h2>SCHEDULE EXAM</h2>\n// //           //   <form onSubmit={handleScheduleSubmit}>\n// //           //     <div>\n// //           //       <label>Class:</label>\n// //           //       <input type=\"text\" value={scheduleExamData.class} disabled />\n// //           //     </div>\n// //           //     <div>\n// //           //       <label>Title:</label>\n// //           //       <input type=\"text\" value={scheduleExamData.title} disabled />\n// //           //     </div>\n// //           //     <div>\n// //           //       <label>Scheduled Date:</label>\n// //           //       <input\n// //           //         type=\"date\"\n// //           //         value={scheduleExamData.scheduledDate}\n// //           //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledDate: e.target.value })}\n// //           //         required\n// //           //       />\n// //           //     </div>\n// //           //     <div>\n// //           //       <label>Scheduled Time:</label>\n// //           //       <input\n// //           //         type=\"time\"\n// //           //         value={scheduleExamData.scheduledTime}\n// //           //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledTime: e.target.value })}\n// //           //         required\n// //           //       />\n// //           //     </div>\n// //           //     <button type=\"submit\">Schedule</button>\n// //           //   </form>\n// //           // </div>\n// //           <div>\n// //   <h2 className=\"text-center mb-4\">SCHEDULE EXAM</h2>\n// //   <form onSubmit={handleScheduleSubmit}>\n// //     {/* <div className=\"form-group\">\n// //       <label>Class:</label>\n// //       <input type=\"text\" value={scheduleExamData.class} className=\"form-control\" disabled />\n// //     </div>\n// //     <div className=\"form-group\">\n// //       <label>Title:</label>\n// //       <input type=\"text\" value={scheduleExamData.title} className=\"form-control\" disabled />\n// //     </div> */}\n// //     <div className=\"form-group\">\n// //       <label>Scheduled Date:</label>\n// //       <input\n// //         type=\"date\"\n// //         value={scheduleExamData.scheduledDate}\n// //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledDate: e.target.value })}\n// //         className=\"form-control\"\n// //         required\n// //       />\n// //     </div>\n// //     <div className=\"form-group\">\n// //       <label>Start Time:</label>\n// //       <input\n// //         type=\"time\"\n// //         value={scheduleExamData.scheduledTime}\n// //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledTime: e.target.value })}\n// //         className=\"form-control\"\n// //         required\n// //       />\n// //     </div>\n// //     <div className=\"form-group\">\n// //       <label>End Time:</label>\n// //       <input\n// //         type=\"time\"\n// //         value={scheduleExamData.scheduledTime}\n// //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledTime: e.target.value })}\n// //         className=\"form-control\"\n// //         required\n// //       />\n// //     </div>\n// //     <button type=\"submit\" className=\"btn btn-primary\">Schedule</button>\n// //   </form>\n// // </div>\n\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ExamView;\n\n// import React, { useState, useEffect } from \"react\";\n// import NavBar from \"./Navbar\";\n// import { Link, useNavigate } from \"react-router-dom\";\n\n// const StudentExam = () => {\n//   const [examData, setExamData] = useState([]);\n//   const [scheduleExamData, setScheduleExamData] = useState({\n//     class: \"\",\n//     title: \"\",\n//     scheduledDate: \"\",\n//     scheduledstartTime: \"\",\n//     scheduledendTime: \"\",\n//   });\n//   const [isScheduling, setIsScheduling] = useState(false);\n//   const [selectedExam, setSelectedExam] = useState(null);\n//   const navigate = useNavigate()\n\n//   useEffect(() => {\n//     // Fetch exam data from the backend\n//     fetch(`http://localhost:4002/api/examview/`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setExamData(data);\n//         console.log(\"Fetched Exam Data:\", data);\n//       })\n//       .catch((error) => console.error(\"Error fetching exam data:\", error));\n//   }, []);\n\n//   const handleScheduleExam = (index) => {\n//     const selectedExam = examData[index];\n//     setSelectedExam(selectedExam);\n//     setScheduleExamData({\n//       class: selectedExam.class,\n//       title: selectedExam.title,\n//       scheduledDate: \"\",\n//       scheduledstartTime: \"\",\n//       scheduledendTime: \"\",\n//     });\n//     setIsScheduling(true);\n//     navigate('/examtest')\n//   };\n\n//   const handleScheduleSubmit = (e) => {\n//     e.preventDefault();\n\n//     const { class: examClass, title, scheduledDate, scheduledstartTime, scheduledendTime } = scheduleExamData;\n\n//     // Send the scheduled exam data to the backend\n//     fetch(`http://localhost:4002/api/scheduleexam/${selectedExam._id}`, {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({\n//         scheduledDate,\n//         scheduledstartTime,\n//         scheduledendTime,\n//       }),\n//     })\n//     .then((response) => response.json())\n//     .then((data) => {\n//       alert(data.message);\n//     })\n//     .catch((error) => console.error(\"Error scheduling exam:\", error));\n\n//     // Reset form data\n//     setScheduleExamData({\n//       class: \"\",\n//       title: \"\",\n//       scheduledDate: \"\",\n//       scheduledstartTime: \"\",\n//       scheduledendTime: \"\",\n//     });\n\n//     setIsScheduling(false);\n//   };\n\n//   return (\n//     // <div className=\"content\">\n//     <>\n//       <NavBar />\n\n//       <div>\n//         <h1 className=\"text-center\">·¥áx·¥Ä·¥ç ·¥Ö·¥á·¥õ·¥Ä…™ üÍú±</h1>\n//         <table border=\"1\" className=\"table table-hover\">\n//           <thead>\n//             <tr>\n//               <th>Class</th>\n//               <th>Title</th>\n//               <th>Questions</th>\n//               <th>Date</th>\n//               <th>Start Time</th>\n//               <th>End time</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {examData.map((item, index) => (\n//               <tr key={index}>\n//                 <td>{item.class}</td>\n//                 <td>{item.title}</td>\n\n//                 <td>\n//                 <ul>\n//                     {item.questions.map((question, qIndex) => (\n//                       <li key={qIndex}>{question}</li>\n//                     ))}\n//                   </ul>\n//                   {/* <button style={{ marginLeft: '20px', borderRadius: '20px' }}> üëÅÔ∏è‚Äçüó®Ô∏è</button> */}\n//                 </td>\n//                 <td>{item.scheduledDate}</td>\n//                 <td>{item.scheduledstartTime}</td>\n//                 <td>{item.scheduledendTime}</td>\n//                 <td>\n//                   {/* <button className=\"btn btn-success m-2\" onClick={() => handleScheduleExam(index)}>\n//                     START\n//                   </button> */}\n//                   <Link to=\"/examtest\" style={{ marginLeft: '150px',border:'2px solid',borderRadius:'20px', marginTop:'80px',padding:'8px'}}>start</Link>\n//                   <button className=\"btn btn-danger m-2\" onClick={() => handleScheduleExam(index)}>\n//                     STOP\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n\n//           </div>\n\n//       {/* </div> */}\n//     </>\n//   );\n// };\n\n// export default StudentExam;\n\n// StudentExam.js\n// import React, { useState, useEffect } from \"react\";\n// import NavBar from \"./Navbar\";\n// import { \n//    useNavigate } from \"react-router-dom\";\n// import ExamTest from \"./ExamTest\";\n\n// const StudentExam = () => {\n//   const [examData, setExamData] = useState([]);\n//   const [selectedExam, setSelectedExam] = useState(null);\n//   const [isScheduling, setIsScheduling] = useState(false);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n\n//     fetch(`http://localhost:4002/api/examview/`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setExamData(data);\n//         console.log(\"Fetched Exam Data:\", data);\n//       })\n//       .catch((error) => console.error(\"Error fetching exam data:\", error));\n//   }, []);\n\n//   const handleStartExam = (index) => {\n\n//     const selectedExam = examData[index];\n//     setSelectedExam(selectedExam);\n//     setIsScheduling(true);\n//     // Navigate to the ExamTest page\n//     navigate('/examtest',{ state: { examId: selectedExam._id } });\n//   };\n\n//   return (\n//     <>\n//       <NavBar />\n//       <div>\n//         <h1 className=\"text-center\">·¥áx·¥Ä·¥ç ·¥Ö·¥á·¥õ·¥Ä…™ üÍú±</h1>\n//         <table border=\"1\" className=\"table table-hover\">\n//           {/* ... (other table headers) */}\n//           <thead>\n//             <tr>\n//               <th>Class</th>\n//               <th>Title</th>\n//               <th>Questions</th>\n//               <th>Date</th>\n//               <th>Start Time</th>\n//               <th>End time</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {examData.map((item, index) => (\n//               <tr key={index}>\n//                 <td>{item.class}</td>\n//                 <td>{item.title}</td>\n//                 <td>\n//                   {/* <ul>\n//                     {item.questions.map((question, qIndex) => (\n//                       <li key={qIndex}>{question}</li>\n//                     ))}\n//                   </ul> */}\n//                   <button style={{ marginLeft: '20px', borderRadius: '20px' }}> üëÅÔ∏è‚Äçüó®Ô∏è</button>\n//                 </td>\n//                 <td>{item.scheduledDate}</td>\n//                 <td>{item.scheduledstartTime}</td>\n//                 <td>{item.scheduledendTime}</td>\n//                 <td>\n//                   <button\n//                     className=\"btn btn-success m-2\"\n//                     onClick={() => handleStartExam(index)}\n//                   >\n//                     START\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Display ExamTest component only when isScheduling is true */}\n//       {isScheduling && (\n//         <ExamTest\n//           title={selectedExam.title}\n//           class={selectedExam.class}\n//           questions={selectedExam.questions}\n//         />\n//       )}\n//     </>\n//   );\n\n// };\n\n// export default StudentExam;\n\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"./Navbar\";\nimport { useNavigate } from \"react-router-dom\";\nimport ExamTest from \"./ExamTest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StudentExam = () => {\n  _s();\n  const [examData, setExamData] = useState([]);\n  const [selectedExam, setSelectedExam] = useState(null);\n  const [isScheduling, setIsScheduling] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetch(`http://localhost:4002/api/examview/`).then(response => response.json()).then(data => {\n      setExamData(data);\n      console.log(\"Fetched Exam Data:\", data);\n    }).catch(error => console.error(\"Error fetching exam data:\", error));\n  }, []);\n  const handleStartExam = index => {\n    const selectedExam = examData[index];\n    const currentTime = new Date();\n    const startTime = new Date(`${selectedExam.scheduledDate}T${selectedExam.scheduledstartTime}`);\n    const endTime = new Date(`${selectedExam.scheduledDate}T${selectedExam.scheduledendTime}`);\n    if (currentTime >= startTime && currentTime <= endTime) {\n      setSelectedExam(selectedExam);\n      setIsScheduling(true);\n      // Navigate to the ExamTest page\n      navigate('/examtest', {\n        state: {\n          examId: selectedExam._id\n        }\n      });\n    } else {\n      alert(\"The exam has not started yet or has already ended.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"\\u1D07x\\u1D00\\u1D0D \\u1D05\\u1D07\\u1D1B\\u1D00\\u026A\\u029F\\uA731\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        className: \"table table-hover\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Class\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Questions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Start Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"End time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: examData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.class\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  marginLeft: '20px',\n                  borderRadius: '20px'\n                },\n                children: \" \\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 499,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.scheduledDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.scheduledstartTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.scheduledendTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success m-2\",\n                onClick: () => handleStartExam(index),\n                children: \"START\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this), isScheduling && /*#__PURE__*/_jsxDEV(ExamTest, {\n      title: selectedExam.title,\n      class: selectedExam.class,\n      questions: selectedExam.questions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(StudentExam, \"cZDb7f7tUsrb5LvoXWSBXCFiPUU=\", false, function () {\n  return [useNavigate];\n});\n_c = StudentExam;\nexport default StudentExam;\nvar _c;\n$RefreshReg$(_c, \"StudentExam\");","map":{"version":3,"names":["React","useState","useEffect","NavBar","useNavigate","ExamTest","jsxDEV","_jsxDEV","Fragment","_Fragment","StudentExam","_s","examData","setExamData","selectedExam","setSelectedExam","isScheduling","setIsScheduling","navigate","fetch","then","response","json","data","console","log","catch","error","handleStartExam","index","currentTime","Date","startTime","scheduledDate","scheduledstartTime","endTime","scheduledendTime","state","examId","_id","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","border","map","item","class","title","style","marginLeft","borderRadius","onClick","questions","_c","$RefreshReg$"],"sources":["C:/Users/anand/OneDrive/Desktop/Examination System/client/src/StudentExam.js"],"sourcesContent":["// // import React from \"react\";\r\n// // import NavBar from \"./Navbar\";\r\n// // import SideBar from \"./Sidebar\";\r\n// // function StudentExam(){\r\n// //     return(\r\n// //         <>\r\n// //         <div className=\"content\">\r\n// //         <NavBar/>\r\n// //         <SideBar/>\r\n// //         </div>\r\n// //         </>\r\n// //     )\r\n// // }\r\n// // export default StudentExam\r\n\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import NavBar from \"./Navbar\";\r\n// // import SideBar from \"./Sidebar\";\r\n\r\n// // const ExamView = () => {\r\n//   // const [examData, setExamData] = useState([]);\r\n//   // const [scheduleExamData, setScheduleExamData] = useState({\r\n//   //   class: \"\",\r\n//   //   title: \"\",\r\n//   //   scheduledDate: \"\",\r\n//   //   scheduledstartTime: \"\",\r\n//   //   scheduledendTime: \"\",\r\n//   // });\r\n//   // const [isScheduling, setIsScheduling] = useState(false);\r\n\r\n//   // useEffect(() => {\r\n//   //   // Fetch exam data from the backend\r\n//   //   fetch(`http://localhost:4002/api/examview/`)\r\n//   //     .then((response) => response.json())\r\n//   //     .then((data) => {\r\n//   //       setExamData(data);\r\n//   //       console.log(\"Fetched Exam Data:\", data);\r\n//   //     })\r\n//   //     .catch((error) => console.error(\"Error fetching exam data:\", error));\r\n//   // }, []);\r\n\r\n// //   const handleScheduleExam = (index) => {\r\n// //     const selectedExam = examData[index];\r\n// //     setScheduleExamData({\r\n// //       class: selectedExam.class,\r\n// //       title: selectedExam.title,\r\n// //       scheduledDate: \"\",\r\n// //       // scheduledTime: \"\",\r\n// //       scheduledstartTime: \"\",\r\n// //     scheduledendTime: \"\"\r\n// //     });\r\n// //     setIsScheduling(true);\r\n// //   };\r\n\r\n// //   const handleScheduleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n\r\n// //     // Implement the logic to send the scheduled exam data to the backend\r\n// //     // ...\r\n\r\n// //     // Reset form data\r\n// //     setScheduleExamData({\r\n// //       class: \"\",\r\n// //       title: \"\",\r\n// //       scheduledDate: \"\",\r\n// //       // scheduledTime: \"\",\r\n// //       scheduledstartTime: \"\",\r\n// //     scheduledendTime: \"\"\r\n// //     });\r\n\r\n// //     setIsScheduling(false);\r\n\r\n// //     // Show alert or confirmation modal\r\n// //     alert(\"Exam scheduled successfully!\");\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"content\">\r\n// //       <NavBar />\r\n// //       <SideBar />\r\n// //       <div>\r\n// //         <h1 className=\"text-center\">·¥áx·¥Ä·¥ç ·¥Ö·¥á·¥õ·¥Ä…™ üÍú±</h1>\r\n// //         <table border=\"1\" className=\"table table-hover\">\r\n// //           <thead>\r\n// //             <tr>\r\n// //               <th>Class</th>\r\n// //               <th>Title</th>\r\n// //               <th>Questions</th>\r\n// //               <th>Action</th>\r\n// //             </tr>\r\n// //           </thead>\r\n// //           <tbody>\r\n// //             {examData.map((item, index) => (\r\n// //               <tr key={index}>\r\n// //                 <td>{item.class}</td>\r\n// //                 <td>{item.title}</td>\r\n// //                 <td>\r\n// //                   <button style={{ marginLeft: '20px', borderRadius: '20px' }}> üëÅÔ∏è‚Äçüó®Ô∏è</button>\r\n// //                 </td>\r\n// //                 <td>\r\n// //                   <button className=\"btn btn-info m-2\" onClick={() => handleScheduleExam(index)}>\r\n// //                     Schedule Exam\r\n// //                   </button>\r\n// //                 </td>\r\n// //               </tr>\r\n// //             ))}\r\n// //           </tbody>\r\n// //         </table>\r\n\r\n// //         {isScheduling && (\r\n// //           // <div>\r\n// //           //   <h2>SCHEDULE EXAM</h2>\r\n// //           //   <form onSubmit={handleScheduleSubmit}>\r\n// //           //     <div>\r\n// //           //       <label>Class:</label>\r\n// //           //       <input type=\"text\" value={scheduleExamData.class} disabled />\r\n// //           //     </div>\r\n// //           //     <div>\r\n// //           //       <label>Title:</label>\r\n// //           //       <input type=\"text\" value={scheduleExamData.title} disabled />\r\n// //           //     </div>\r\n// //           //     <div>\r\n// //           //       <label>Scheduled Date:</label>\r\n// //           //       <input\r\n// //           //         type=\"date\"\r\n// //           //         value={scheduleExamData.scheduledDate}\r\n// //           //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledDate: e.target.value })}\r\n// //           //         required\r\n// //           //       />\r\n// //           //     </div>\r\n// //           //     <div>\r\n// //           //       <label>Scheduled Time:</label>\r\n// //           //       <input\r\n// //           //         type=\"time\"\r\n// //           //         value={scheduleExamData.scheduledTime}\r\n// //           //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledTime: e.target.value })}\r\n// //           //         required\r\n// //           //       />\r\n// //           //     </div>\r\n// //           //     <button type=\"submit\">Schedule</button>\r\n// //           //   </form>\r\n// //           // </div>\r\n// //           <div>\r\n// //   <h2 className=\"text-center mb-4\">SCHEDULE EXAM</h2>\r\n// //   <form onSubmit={handleScheduleSubmit}>\r\n// //     {/* <div className=\"form-group\">\r\n// //       <label>Class:</label>\r\n// //       <input type=\"text\" value={scheduleExamData.class} className=\"form-control\" disabled />\r\n// //     </div>\r\n// //     <div className=\"form-group\">\r\n// //       <label>Title:</label>\r\n// //       <input type=\"text\" value={scheduleExamData.title} className=\"form-control\" disabled />\r\n// //     </div> */}\r\n// //     <div className=\"form-group\">\r\n// //       <label>Scheduled Date:</label>\r\n// //       <input\r\n// //         type=\"date\"\r\n// //         value={scheduleExamData.scheduledDate}\r\n// //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledDate: e.target.value })}\r\n// //         className=\"form-control\"\r\n// //         required\r\n// //       />\r\n// //     </div>\r\n// //     <div className=\"form-group\">\r\n// //       <label>Start Time:</label>\r\n// //       <input\r\n// //         type=\"time\"\r\n// //         value={scheduleExamData.scheduledTime}\r\n// //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledTime: e.target.value })}\r\n// //         className=\"form-control\"\r\n// //         required\r\n// //       />\r\n// //     </div>\r\n// //     <div className=\"form-group\">\r\n// //       <label>End Time:</label>\r\n// //       <input\r\n// //         type=\"time\"\r\n// //         value={scheduleExamData.scheduledTime}\r\n// //         onChange={(e) => setScheduleExamData({ ...scheduleExamData, scheduledTime: e.target.value })}\r\n// //         className=\"form-control\"\r\n// //         required\r\n// //       />\r\n// //     </div>\r\n// //     <button type=\"submit\" className=\"btn btn-primary\">Schedule</button>\r\n// //   </form>\r\n// // </div>\r\n\r\n// //         )}\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default ExamView;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import NavBar from \"./Navbar\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n\r\n\r\n// const StudentExam = () => {\r\n//   const [examData, setExamData] = useState([]);\r\n//   const [scheduleExamData, setScheduleExamData] = useState({\r\n//     class: \"\",\r\n//     title: \"\",\r\n//     scheduledDate: \"\",\r\n//     scheduledstartTime: \"\",\r\n//     scheduledendTime: \"\",\r\n//   });\r\n//   const [isScheduling, setIsScheduling] = useState(false);\r\n//   const [selectedExam, setSelectedExam] = useState(null);\r\n//   const navigate = useNavigate()\r\n\r\n//   useEffect(() => {\r\n//     // Fetch exam data from the backend\r\n//     fetch(`http://localhost:4002/api/examview/`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         setExamData(data);\r\n//         console.log(\"Fetched Exam Data:\", data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching exam data:\", error));\r\n//   }, []);\r\n\r\n//   const handleScheduleExam = (index) => {\r\n//     const selectedExam = examData[index];\r\n//     setSelectedExam(selectedExam);\r\n//     setScheduleExamData({\r\n//       class: selectedExam.class,\r\n//       title: selectedExam.title,\r\n//       scheduledDate: \"\",\r\n//       scheduledstartTime: \"\",\r\n//       scheduledendTime: \"\",\r\n//     });\r\n//     setIsScheduling(true);\r\n//     navigate('/examtest')\r\n//   };\r\n\r\n//   const handleScheduleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const { class: examClass, title, scheduledDate, scheduledstartTime, scheduledendTime } = scheduleExamData;\r\n\r\n//     // Send the scheduled exam data to the backend\r\n//     fetch(`http://localhost:4002/api/scheduleexam/${selectedExam._id}`, {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify({\r\n//         scheduledDate,\r\n//         scheduledstartTime,\r\n//         scheduledendTime,\r\n//       }),\r\n//     })\r\n//     .then((response) => response.json())\r\n//     .then((data) => {\r\n//       alert(data.message);\r\n//     })\r\n//     .catch((error) => console.error(\"Error scheduling exam:\", error));\r\n\r\n//     // Reset form data\r\n//     setScheduleExamData({\r\n//       class: \"\",\r\n//       title: \"\",\r\n//       scheduledDate: \"\",\r\n//       scheduledstartTime: \"\",\r\n//       scheduledendTime: \"\",\r\n//     });\r\n\r\n//     setIsScheduling(false);\r\n//   };\r\n\r\n//   return (\r\n//     // <div className=\"content\">\r\n//     <>\r\n//       <NavBar />\r\n      \r\n//       <div>\r\n//         <h1 className=\"text-center\">·¥áx·¥Ä·¥ç ·¥Ö·¥á·¥õ·¥Ä…™ üÍú±</h1>\r\n//         <table border=\"1\" className=\"table table-hover\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Class</th>\r\n//               <th>Title</th>\r\n//               <th>Questions</th>\r\n//               <th>Date</th>\r\n//               <th>Start Time</th>\r\n//               <th>End time</th>\r\n//               <th>Action</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {examData.map((item, index) => (\r\n//               <tr key={index}>\r\n//                 <td>{item.class}</td>\r\n//                 <td>{item.title}</td>\r\n                \r\n//                 <td>\r\n//                 <ul>\r\n//                     {item.questions.map((question, qIndex) => (\r\n//                       <li key={qIndex}>{question}</li>\r\n//                     ))}\r\n//                   </ul>\r\n//                   {/* <button style={{ marginLeft: '20px', borderRadius: '20px' }}> üëÅÔ∏è‚Äçüó®Ô∏è</button> */}\r\n//                 </td>\r\n//                 <td>{item.scheduledDate}</td>\r\n//                 <td>{item.scheduledstartTime}</td>\r\n//                 <td>{item.scheduledendTime}</td>\r\n//                 <td>\r\n//                   {/* <button className=\"btn btn-success m-2\" onClick={() => handleScheduleExam(index)}>\r\n//                     START\r\n//                   </button> */}\r\n//                   <Link to=\"/examtest\" style={{ marginLeft: '150px',border:'2px solid',borderRadius:'20px', marginTop:'80px',padding:'8px'}}>start</Link>\r\n//                   <button className=\"btn btn-danger m-2\" onClick={() => handleScheduleExam(index)}>\r\n//                     STOP\r\n//                   </button>\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n\r\n//           </div>\r\n        \r\n//       {/* </div> */}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default StudentExam;\r\n\r\n// StudentExam.js\r\n// import React, { useState, useEffect } from \"react\";\r\n// import NavBar from \"./Navbar\";\r\n// import { \r\n//    useNavigate } from \"react-router-dom\";\r\n// import ExamTest from \"./ExamTest\";\r\n\r\n// const StudentExam = () => {\r\n//   const [examData, setExamData] = useState([]);\r\n//   const [selectedExam, setSelectedExam] = useState(null);\r\n//   const [isScheduling, setIsScheduling] = useState(false);\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n  \r\n//     fetch(`http://localhost:4002/api/examview/`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         setExamData(data);\r\n//         console.log(\"Fetched Exam Data:\", data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching exam data:\", error));\r\n//   }, []);\r\n\r\n//   const handleStartExam = (index) => {\r\n    \r\n//     const selectedExam = examData[index];\r\n//     setSelectedExam(selectedExam);\r\n//     setIsScheduling(true);\r\n//     // Navigate to the ExamTest page\r\n//     navigate('/examtest',{ state: { examId: selectedExam._id } });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <NavBar />\r\n//       <div>\r\n//         <h1 className=\"text-center\">·¥áx·¥Ä·¥ç ·¥Ö·¥á·¥õ·¥Ä…™ üÍú±</h1>\r\n//         <table border=\"1\" className=\"table table-hover\">\r\n//           {/* ... (other table headers) */}\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Class</th>\r\n//               <th>Title</th>\r\n//               <th>Questions</th>\r\n//               <th>Date</th>\r\n//               <th>Start Time</th>\r\n//               <th>End time</th>\r\n//               <th>Action</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {examData.map((item, index) => (\r\n//               <tr key={index}>\r\n//                 <td>{item.class}</td>\r\n//                 <td>{item.title}</td>\r\n//                 <td>\r\n//                   {/* <ul>\r\n//                     {item.questions.map((question, qIndex) => (\r\n//                       <li key={qIndex}>{question}</li>\r\n//                     ))}\r\n//                   </ul> */}\r\n//                   <button style={{ marginLeft: '20px', borderRadius: '20px' }}> üëÅÔ∏è‚Äçüó®Ô∏è</button>\r\n//                 </td>\r\n//                 <td>{item.scheduledDate}</td>\r\n//                 <td>{item.scheduledstartTime}</td>\r\n//                 <td>{item.scheduledendTime}</td>\r\n//                 <td>\r\n//                   <button\r\n//                     className=\"btn btn-success m-2\"\r\n//                     onClick={() => handleStartExam(index)}\r\n//                   >\r\n//                     START\r\n//                   </button>\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n\r\n//       {/* Display ExamTest component only when isScheduling is true */}\r\n//       {isScheduling && (\r\n//         <ExamTest\r\n//           title={selectedExam.title}\r\n//           class={selectedExam.class}\r\n//           questions={selectedExam.questions}\r\n//         />\r\n//       )}\r\n//     </>\r\n//   );\r\n  \r\n// };\r\n\r\n// export default StudentExam;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport NavBar from \"./Navbar\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ExamTest from \"./ExamTest\";\r\n\r\nconst StudentExam = () => {\r\n  const [examData, setExamData] = useState([]);\r\n  const [selectedExam, setSelectedExam] = useState(null);\r\n  const [isScheduling, setIsScheduling] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetch(`http://localhost:4002/api/examview/`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setExamData(data);\r\n        console.log(\"Fetched Exam Data:\", data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching exam data:\", error));\r\n  }, []);\r\n\r\n  const handleStartExam = (index) => {\r\n    const selectedExam = examData[index];\r\n    const currentTime = new Date();\r\n    const startTime = new Date(`${selectedExam.scheduledDate}T${selectedExam.scheduledstartTime}`);\r\n    const endTime = new Date(`${selectedExam.scheduledDate}T${selectedExam.scheduledendTime}`);\r\n\r\n    if (currentTime >= startTime && currentTime <= endTime) {\r\n      setSelectedExam(selectedExam);\r\n      setIsScheduling(true);\r\n      // Navigate to the ExamTest page\r\n      navigate('/examtest', { state: { examId: selectedExam._id } });\r\n    } else {\r\n      alert(\"The exam has not started yet or has already ended.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <div>\r\n        <h1 className=\"text-center\">·¥áx·¥Ä·¥ç ·¥Ö·¥á·¥õ·¥Ä…™ üÍú±</h1>\r\n        <table border=\"1\" className=\"table table-hover\">\r\n          {/* ... (other table headers) */}\r\n          <thead>\r\n            <tr>\r\n              <th>Class</th>\r\n              <th>Title</th>\r\n              <th>Questions</th>\r\n              <th>Date</th>\r\n              <th>Start Time</th>\r\n              <th>End time</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {examData.map((item, index) => (\r\n              <tr key={index}>\r\n                <td>{item.class}</td>\r\n                <td>{item.title}</td>\r\n                <td>\r\n                  {/* <ul>\r\n                    {item.questions.map((question, qIndex) => (\r\n                      <li key={qIndex}>{question}</li>\r\n                    ))}\r\n                  </ul> */}\r\n                  <button style={{ marginLeft: '20px', borderRadius: '20px' }}> üëÅÔ∏è‚Äçüó®Ô∏è</button>\r\n                </td>\r\n                <td>{item.scheduledDate}</td>\r\n                <td>{item.scheduledstartTime}</td>\r\n                <td>{item.scheduledendTime}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-success m-2\"\r\n                    onClick={() => handleStartExam(index)}\r\n                  >\r\n                    START\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Display ExamTest component only when isScheduling is true */}\r\n      {isScheduling && (\r\n        <ExamTest\r\n          title={selectedExam.title}\r\n          class={selectedExam.class}\r\n          questions={selectedExam.questions}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StudentExam;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}