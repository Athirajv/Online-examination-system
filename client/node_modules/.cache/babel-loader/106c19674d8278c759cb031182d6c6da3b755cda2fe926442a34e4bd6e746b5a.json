{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\OneDrive\\\\Desktop\\\\Examination System\\\\client\\\\src\\\\Completed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"./Navbar\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Studentcompleted() {\n  _s();\n  const [completedExams, setCompletedExams] = useState([]);\n  const [examData, setExamData] = useState([]);\n  const [selectedExam, setSelectedExam] = useState(null);\n  const [isScheduling, setIsScheduling] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Fetch all exams data from your API or data source\n    // Replace the following with your actual endpoint or data fetching logic\n    fetch('http://localhost:4002/api/examview/').then(res => res.json()).then(result => {\n      // Filter completed exams based on current date and time\n      const currentDate = new Date();\n      const filteredCompletedExams = result.filter(exam => {\n        const examEndDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledendTime}`);\n        return currentDate > examEndDateTime;\n      });\n      setCompletedExams(filteredCompletedExams);\n    });\n  }, []);\n  const handleStartExam = index => {\n    const selectedExam = examData[index];\n    const currentTime = new Date();\n    console.log(selectedExam);\n    const startTime = new Date(`${selectedExam.scheduledDate}T${selectedExam.scheduledstartTime}`);\n    const endTime = new Date(`${selectedExam.scheduledDate}T${selectedExam.scheduledendTime}`);\n    if (currentTime >= startTime && currentTime <= endTime) {\n      setSelectedExam(selectedExam);\n      setIsScheduling(true);\n      navigate('/examtest', {\n        state: {\n          examId: selectedExam._id\n        }\n      });\n    } else {\n      alert(\"The exam has not started yet or has already ended.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mb-4 text-center\",\n        children: \"Completed Exams\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-bordered  table table-hover alert alert-danger\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Exam Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Exam Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Start Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"End Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: completedExams.map(exam => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: exam.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: exam.scheduledDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: exam.scheduledstartTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: exam.scheduledendTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success m-2\",\n                onClick: () => handleStartExam(),\n                children: \"START\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this)]\n          }, exam._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Studentcompleted, \"ZZDnnM6E0gvD7320MduSj9xAv1A=\", false, function () {\n  return [useNavigate];\n});\n_c = Studentcompleted;\nexport default Studentcompleted;\nvar _c;\n$RefreshReg$(_c, \"Studentcompleted\");","map":{"version":3,"names":["React","useState","useEffect","NavBar","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Studentcompleted","_s","completedExams","setCompletedExams","examData","setExamData","selectedExam","setSelectedExam","isScheduling","setIsScheduling","navigate","fetch","then","res","json","result","currentDate","Date","filteredCompletedExams","filter","exam","examEndDateTime","scheduledDate","scheduledendTime","handleStartExam","index","currentTime","console","log","startTime","scheduledstartTime","endTime","state","examId","_id","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","title","onClick","_c","$RefreshReg$"],"sources":["C:/Users/anand/OneDrive/Desktop/Examination System/client/src/Completed.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport NavBar from \"./Navbar\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Studentcompleted() {\r\n  const [completedExams, setCompletedExams] = useState([]);\r\n  const [examData, setExamData] = useState([]);\r\n  const [selectedExam, setSelectedExam] = useState(null);\r\n  const [isScheduling, setIsScheduling] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n\r\n  useEffect(() => {\r\n    // Fetch all exams data from your API or data source\r\n    // Replace the following with your actual endpoint or data fetching logic\r\n    fetch('http://localhost:4002/api/examview/')\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        // Filter completed exams based on current date and time\r\n        const currentDate = new Date();\r\n\r\n        const filteredCompletedExams = result.filter((exam) => {\r\n          const examEndDateTime = new Date(`${exam.scheduledDate} ${exam.scheduledendTime}`);\r\n\r\n          return currentDate > examEndDateTime;\r\n        });\r\n\r\n        setCompletedExams(filteredCompletedExams);\r\n      });\r\n  }, []);\r\n\r\n\r\n  const handleStartExam = (index) => {\r\n    const selectedExam = examData[index];\r\n    const currentTime = new Date();\r\n    console.log(selectedExam)\r\n    const startTime = new Date(`${selectedExam.scheduledDate}T${selectedExam.scheduledstartTime}`);\r\n    const endTime = new Date(`${selectedExam.scheduledDate}T${selectedExam.scheduledendTime}`);\r\n\r\n    if (currentTime >= startTime && currentTime <= endTime) {\r\n      setSelectedExam(selectedExam);\r\n      setIsScheduling(true);\r\n     \r\n      \r\n      navigate('/examtest', { state: { examId: selectedExam._id } });\r\n    } else {\r\n      alert(\"The exam has not started yet or has already ended.\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <div className=\"container mt-4\">\r\n        <h4 className=\"mb-4 text-center\">Completed Exams</h4>\r\n        <table className=\"table table-bordered  table table-hover alert alert-danger\">\r\n          <thead>\r\n            <tr>\r\n              <th>Exam Name</th>\r\n              <th>Exam Date</th>\r\n              <th>Start Time</th>\r\n              <th>End Time</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {completedExams.map((exam) => (\r\n              <tr key={exam._id}>\r\n                <td>{exam.title}</td>\r\n                <td>{exam.scheduledDate}</td>\r\n                <td>{exam.scheduledstartTime}</td>\r\n                <td>{exam.scheduledendTime}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-success m-2\"\r\n                    onClick={() => handleStartExam()}\r\n                  >\r\n                    START\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Studentcompleted;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}